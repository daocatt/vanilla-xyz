{"version":3,"sources":["webpack://vanilla-admin/./packages/vanilla-utils/src/logicUtils.ts","webpack://vanilla-admin/./packages/vanilla-utils/src/mathUtils.ts","webpack://vanilla-admin/./packages/vanilla-utils/src/stringUtils.ts","webpack://vanilla-admin/./packages/vanilla-utils/src/systemUtils.ts","webpack://vanilla-admin/./packages/vanilla-utils/src/typeUtils.ts","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardFormGroup.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/roles/RoleActions.ts","webpack://vanilla-admin/./node_modules/moment/locale sync en","webpack://vanilla-admin/./applications/vanilla/src/scripts/categories/CategorySuggestionActions.ts","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardCodeEditor.tsx","webpack://vanilla-admin/./packages/vanilla-i18n/src/localeStore.ts","webpack://vanilla-admin/./packages/vanilla-i18n/src/LocaleProvider.tsx","webpack://vanilla-admin/./packages/vanilla-i18n/src/translationStore.ts","webpack://vanilla-admin/./packages/vanilla-i18n/src/ContentTranslator.tsx","webpack://vanilla-admin/./packages/vanilla-i18n/src/ContentTranslationProvider.tsx","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/domData.ts","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/emoji.ts","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/EscapeListener.ts","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/events.ts","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/FocusWatcher.ts","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/sanitization.ts","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/scripts.ts","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/shadowDom.tsx","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/TabHandler.ts","webpack://vanilla-admin/./packages/vanilla-dom-utils/src/index.ts","webpack://vanilla-admin/./packages/vanilla-react-utils/src/Hoverable.tsx","webpack://vanilla-admin/./packages/vanilla-react-utils/src/useMeasure.ts","webpack://vanilla-admin/./packages/vanilla-react-utils/src/useDomNodeAttachment.tsx","webpack://vanilla-admin/./packages/vanilla-react-utils/src/useEscapeListener.ts","webpack://vanilla-admin/./packages/vanilla-react-utils/src/useFocusWatcher.ts","webpack://vanilla-admin/./packages/vanilla-react-utils/src/useLastValue.tsx","webpack://vanilla-admin/./packages/vanilla-react-utils/src/useThrowError.ts","webpack://vanilla-admin/./packages/vanilla-utils/src/debugUtils.ts","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardFormGroupContext.tsx","webpack://vanilla-admin/./packages/vanilla-react-utils/src/mounting.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/compatibilityStyles/cssOut.ts","webpack://vanilla-admin/./applications/dashboard/src/scripts/roles/roleHooks.ts","webpack://vanilla-admin/./applications/dashboard/src/scripts/roles/MultiRoleInput.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/dashboardStyles.ts","webpack://vanilla-admin/./library/src/scripts/forms/select/SelectOne.tsx","webpack://vanilla-admin/./applications/vanilla/src/scripts/forms/CommunityCategoryInput.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardRadioGroups.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardCheckBox.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardFormGroupPlaceholder.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardFormSubheading.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardLegacyFormValue.tsx","webpack://vanilla-admin/./library/src/scripts/forms/select/SelectLookup.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardSelectLookup.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardInput.tsx","webpack://vanilla-admin/./library/src/scripts/forms/RadioButton.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardRadioButton.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardSelect.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardToggle.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/widgets/WidgetFormControl.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/widgets/WidgetFormGenerator.tsx","webpack://vanilla-admin/./plugins/pockets/src/scripts/conditions/PocketContentForm.tsx","webpack://vanilla-admin/./plugins/pockets/src/scripts/entries/admin.tsx","webpack://vanilla-admin/./plugins/pockets/src/scripts/conditions/PocketMultiRoleInput.tsx","webpack://vanilla-admin/./plugins/pockets/src/scripts/conditions/PocketCategoryInput.tsx","webpack://vanilla-admin/./applications/dashboard/src/scripts/forms/DashboardFormLabel.tsx","webpack://vanilla-admin/./build/entries/public-path.ts"],"names":["flattenObject","obj","delimiter","Object","keys","reduce","acc","key","prefix","length","Array","isArray","assign","simplifyFraction","numerator","denominator","gcd","findGCD","a","b","shorthand","hashString","str","split","prevHash","currVal","charCodeAt","labelize","label","replace","parts","map","s","charAt","toLocaleUpperCase","slice","join","slugify","options","whiteSpaceNormalizeRegexp","allowMultipleDashes","normalize","trim","toLocaleLowerCase","OS","SAFE_PROTOCOL_REGEX","sanitizeUrl","url","match","capitalizeFirstLetter","toUpperCase","guessOperatingSystem","userAgent","navigator","vendor","window","opera","test","ANDROID","MSStream","IOS","UNKNOWN","indexArrayByKey","array","object","item","push","notEmpty","value","ensureString","maybeString","TypeError","forceInt","fallback","result","Number","parseInt","isNaN","DashboardFormGroup","props","Tag","tag","inputID","useUniqueID","labelID","className","classNames","isIndependant","Provider","labelType","DashboardLabelType","STANDARD","children","createAction","actionCreatorFactory","RoleActions","thunk","bindThunkAction","getAllACs","async","api","get","params","limit","response","data","dispatch","ReduxActions","useRoleActions","useReduxActions","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","module","exports","CategorySuggestionActions","query","apiThunk","loadCategories","expand","debounce","internalLoadCategories","DashboardCodeEditor","useState","initialValue","setValue","formGroup","useFormGroup","name","inputName","type","aria-hidden","minimal","language","onChange","mountDashboardCodeEditors","document","querySelectorAll","forEach","mount","HTMLTextAreaElement","classList","remove","initialContent","mountReact","undefined","overwrite","logWarning","currentLocale","localeStore","callbacks","getLocales","setCurrentLocale","localeKey","callback","getCurrentLocale","getJSLocaleKey","loadLocales","locales","LocaleContext","React","createContext","LocaleProvider","setLocales","useEffect","useLocaleInfo","useContext","translationStore","internalTranslationDebugValue","translationDebug","newValue","loadTranslations","translations","translate","defaultTranslation","substr","message","TranslationPropertyType","t","NullContentTranslator","logError","context","shouldDisplay","Translator","_TranslationComponent","ContentTranslationProvider","setTranslator","WeakMap","emojiSupportedCache","emojiOptions","size","convertToSafeEmojiCharacters","stringOrNode","canvas","createElement","getContext","ctx","fillText","getImageData","isEmojiSupported","twemoji","parse","EscapeListener","root","returnElement","addEventListener","keydownListener","removeEventListener","event","contains","activeElement","preventDefault","focus","delegatedEventListeners","delegateEvent","eventName","filterSelector","scopeSelector","scope","functionKey","toString","querySelector","HTMLElement","eventHash","includes","wrappedCallback","target","closest","call","FocusWatcher","watchedNode","changeHandler","handleFocusOut","handleFocusIn","handleClick","checkDomTreeHasFocus","triggeringElement","checkDomTreeWasClicked","clickedElement","this","setTimeout","relatedTarget","explicitOriginalTarget","body","isWatchedInBody","isFocusedInBody","isModal","Boolean","getElementById","hasFocus","escapeHTML","div","appendChild","createTextNode","innerHTML","loadEventCallbacks","rejectionCache","Map","ensureScript","scriptUrl","Promise","reject","existingScript","has","head","getElementsByTagName","script","src","onerror","error","set","timeout","onload","clearTimeout","delete","prepareShadowRoot","element","cloneElement","newElementTag","html","ns","append","startsWith","browserEscapesNoScript","escapedString","child","childNodes","nodeValue","unescapeHTML","newElement","parentNode","insertBefore","attachShadow","mode","TabHandler","documentElement","excludedElements","excludedRoots","exemption","elementToFilter","excludedRoot","tabbableElements","tabbable","from","reverse","allowLooping","tabbables","filter","createExcludeFilterWithExemption","currentTabIndex","indexOf","targetIndex","filterAllExcluded","smoothscroll","polyfill","Hoverable","hasExecuted","once","onHover","hoverTimeout","handleHover","duration","dismissTimeout","onMouseEnter","mouseEnterHandler","onMouseLeave","mouseLeaveHandler","Component","EMPTY_RECT","x","y","width","height","top","right","bottom","left","toJSON","useMeasure","ref","adjustForScrollOffset","watchRef","bounds","setContentRect","refWatch","current","useLayoutEffect","animationFrameId","measure","requestAnimationFrame","rect","getBoundingClientRect","scrollY","JSON","stringify","resizeListener","ro","ResizeObserver","observe","cancelAnimationFrame","disconnect","cancel","useDomNodeAttachment","domNodes","useRef","node","DomNodeAttacher","_props","nodes","useEscapeListener","actualRoot","escapeListener","start","stop","useFocusWatcher","bypass","focusWatcher","useLastValue","useThrowError","setError","internalDebugValue","debug","logDebug","console","log","logDebugConditionnal","outputLog","warn","FormGroupContext","throwError","hasRendered","portals","PORTAL_MANAGER_ID","PortalContext","Fragment","applySharedPortalContext","renderPortals","PortalManager","portal","i","ReactDOM","createPortal","component","container","render","bypassPortalManager","unmountBeforeRender","unmountComponentAtNode","setImmediate","cleanupContainer","mountPoint","clearContents","parentElement","firstElementChild","mountPortal","containerID","asRealPortal","cssOut","selector","objects","cssRaw","flattenNests","useRoles","getAllRoles","rolesByID","useSelector","state","roles","status","LoadStatus","PENDING","MultiRoleInput","roleOptions","values","role","roleID","Tokens","option","isLoading","LOADING","dashboardClasses","useThemeCache","globalVars","globalVariables","style","styleFactory","formList","padding","helpAsset","fontSize","marginBottom","gutter","tokenInput","selectOne","MenuPlacement","SelectOne","describedBy","overrideProps","inputClassName","noOptionsMessage","componentOverwrites","useMemo","Menu","selectOverrides","MenuList","Option","ValueContainer","localProps","DropdownIndicator","NoOptionsMessage","LoadingMessage","customStyles","menu","base","backgroundColor","boxShadow","control","borderWidth","getTheme","useCallback","theme","borderRadius","colors","spacing","components","styles","useOverrideProps","isFocused","setIsFocused","generatedID","errorID","disabled","searchable","forceOpen","hasErrors","errors","classes","selectOneClasses","classesInputBlock","inputBlockClasses","onClick","selectRef","htmlFor","labelAndDescription","labelText","Paragraph","labelNote","inputWrap","inputId","defaultValue","onInputChange","isClearable","isDisabled","classNamePrefix","aria-label","aria-labelledby","aria-invalid","aria-describedby","isSearchable","menuIsOpen","placeholder","onMenuOpen","onFocus","onBlur","menuPlacement","noteAfterInput","ErrorMessages","defaultProps","CommunityCategoryInput","suggestions","lookup","multiple","SUCCESS","suggestion","parentLabel","crumbLength","breadcrumbs","categoryID","lookupOnFocus","showIndicator","text","selectProps","inputValue","withRedux","connect","ownProps","forum","categories","categorySuggestionActions","apiv2","first","RadioGroupContext","useDashboardRadioGroup","DashboardRadioGroup","rootClass","WIDE","inline","isInline","grid","isGrid","DashboardCheckBox","excludeFromICheck","checked","isHorizontal","DashboardFormGroupPlaceholder","LoadingRectangle","descriptionLines","tabIndex","background","DashboardFormSubheading","DashboardLegacyFormValue","formKey","flatten","dottedKey","display","flattened","entries","json","SelectLookup","ownQuery","setQuery","currentValue","currentInputValue","onInitialValueLoaded","setOptions","initialOption","setInitialOption","searchUrl","singleUrl","labelKey","valueKey","processOptions","excludeLookups","useDebugValue","apiCaches","transformApiToOption","actualApiUrl","then","updateOptions","actualSearchUrl","cached","currentOption","find","useApiLookup","DashboardSelectLookup","DashboardInput","InputTextBlock","inputProps","multiLineProps","noMargin","afterInput","RadioButton","checkRadioClasses","note","noteID","input","fakeFocus","aria-disabled","defaultChecked","iconContainer","disk","diskIcon","fill","cx","cy","r","DashboardRadioButton","controlledProps","isDashboard","DashboardSelect","DashboardToggle","inProgress","visibility","visuallyHidden","WidgetFormControl","formControl","schema","default","radioName","inputType","isMultiline","maxLength","multiline","rows","choices","staticOptions","optionValue","isRequired","opt","valueCompare","WidgetPartialSchemaForm","path","instance","rootInstance","requiredProperties","required","properties","controls","singleControl","index","description","conditions","fieldName","some","ev","WidgetFormGenerator","widgetsApi","addComponent","setRoles","viewRoleIDs","category","setCategory","inheritCategory","setInheritCategory","inputClasses","applyInputCSSRules","hasCategory","checkBoxAfterInput","initialWidgetParameters","initialBody","format","widgetID","typeOption","setTypeOption","mountCounter","setMountCounter","setValues","setBody","val","forceLoading","DashboardFormLabel","afterDescription","__webpack_public_path__","assetUrl"],"mappings":"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","file":"addons/pockets.min.js?07c500edb49e717d2f7a","sourcesContent":["/**\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2020 Vanilla Forums Inc.\n * @license gpl-2.0-only\n */\n\nimport set from \"lodash/set\";\n\nexport function spaceshipCompare(a, b): number {\n    if (a > b) {\n        return 1;\n    } else if (a < b) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n\nexport function flattenObject(obj: Record<any, any>, delimiter = \"\") {\n    return Object.keys(obj).reduce((acc, key) => {\n        const prefix = delimiter.length ? delimiter + \".\" : \"\";\n        if (typeof obj[key] === \"object\" && !Array.isArray(obj[key]) && obj[key] !== null) {\n            Object.assign(acc, flattenObject(obj[key], prefix + key));\n        } else {\n            acc[prefix + key] = obj[key];\n        }\n        return acc;\n    }, {});\n}\n\nexport function unflattenObject(original: Record<any, any>) {\n    const result = {};\n\n    for (const [key, value] of Object.entries(original)) {\n        set(result, key, value);\n    }\n\n    return result;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\n/**\n * Get various information about a fraction.\n *\n * @param numerator The fraction numerator.\n * @param denominator The fraction denominator.\n */\nexport function simplifyFraction(numerator: number, denominator: number) {\n    const findGCD = (a, b) => {\n        return b ? findGCD(b, a % b) : a;\n    };\n    const gcd = findGCD(numerator, denominator);\n\n    numerator = numerator / gcd;\n    denominator = denominator / gcd;\n\n    return {\n        numerator,\n        denominator,\n        shorthand: denominator + \":\" + numerator,\n    };\n}\n","/**\n * Utilities related to strings.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport mergeWith from \"lodash/mergeWith\";\n\n/**\n * A simple, fast method of hashing a string. Similar to Java's hash function.\n * https://stackoverflow.com/a/7616484/1486603\n *\n * @param str - The string to hash.\n *\n * @returns The hash code returned.\n */\nexport function hashString(str: string): number {\n    function hashReduce(prevHash, currVal) {\n        // tslint:disable-next-line:no-bitwise\n        return (prevHash << 5) - prevHash + currVal.charCodeAt(0);\n    }\n    return str.split(\"\").reduce(hashReduce, 0);\n}\n\n/**\n * Generate a RFC4122 compliant uuid. NOTE!!! Not cryptographically secure.\n *\n * This does not use a true random source (Eg. using Math.random()).\n * To use a better source would require dropping IE in order to use the crypto module.\n */\nexport function uuidv4() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0,\n            v = c == \"x\" ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\n\n/**\n * Convert a camel case variable to a title case label.\n *\n * @param str - The string to labelize.\n * @returns Returns a new string suitable for a label.\n */\nexport function labelize(str: string): string {\n    /**\n     * $labelCode = preg_replace('`(?<![A-Z0-9])([A-Z0-9])`', ' $1', $labelCode);\n     * $labelCode = preg_replace('`([A-Z0-9])(?=[a-z])`', ' $1', $labelCode);\n     * $labelCode = preg_replace('`\\s+`', ' ', $labelCode);\n     * $labelCode = ucfirst(trim($labelCode));\n     */\n    let label = str.replace(/([^A-Z0-9])([A-Z0-9])/, \"$1 $2\");\n    label = label.replace(/([A-Z0-9])(?=[a-z])/, \" $1\");\n    label = label.replace(/[_-]/, \" \");\n    label = label.replace(/\\s+/, \" \");\n    let parts = label.split(\" \");\n    label = parts.map((s) => s.charAt(0).toLocaleUpperCase() + s.slice(1)).join(\" \");\n    return label;\n}\n\n/**\n * Hash an object into a short key, that is stable no matter what order the parameters are.\n */\nexport function stableObjectHash<T extends object>(obj: T): number {\n    // Sort the object first.\n    const ordered: any = {};\n    Object.keys(obj)\n        .sort()\n        .forEach(function (key) {\n            ordered[key] = obj[key];\n        });\n    return hashString(JSON.stringify(ordered));\n}\n\ntype CompareReturn = -1 | 0 | 1;\n\n/**\n * Utility for sorting values. Similar to the <=> operator in PHP.\n *\n * @param val1 The first value to compare.\n * @param val2 The second value to compare.\n *\n * @returns -1, 0, or 1\n */\nexport function compare<T extends string | number>(val1: T, val2: T): CompareReturn {\n    if (typeof val1 === \"string\" && typeof val2 === \"string\") {\n        return val1.localeCompare(val2) as CompareReturn;\n    } else {\n        if (val1 > val2) {\n            return 1;\n        } else if (val1 < val2) {\n            return -1;\n        }\n        return 0;\n    }\n}\n\n/**\n * Parse a string into a URL friendly format.\n *\n * Eg. Why Uber isn’t spelled Über -> why-uber-isnt-spelled-uber\n *\n * @param str The string to parse.\n */\nexport function slugify(\n    str: string,\n    options?: {\n        allowMultipleDashes?: boolean;\n    },\n): string {\n    const whiteSpaceNormalizeRegexp = options && options.allowMultipleDashes ? /[\\s]+/g : /[-\\s]+/g;\n    return str\n        .normalize(\"NFD\") // Normalize accented characters into ASCII equivalents\n        .replace(/[^\\w\\s$*_+~.()'\"\\-!:@]/g, \"\") // REmove characters that don't URL encode well\n        .trim() // Trim whitespace\n        .replace(whiteSpaceNormalizeRegexp, \"-\") // Normalize whitespace\n        .toLocaleLowerCase(); // Convert to locale aware lowercase.\n}\n\nexport function normalizeString(str: string): string {\n    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n}\n\n/**\n * Split a string in multiple pieces similar to String.prototype.split but ignore most acccent characters.\n *\n * This will still return pieces with accents.\n *\n * @param toSplit The string to split.\n * @param splitWith The string to split with.\n */\nexport function splitStringLoosely(toSplit: string, splitWith: string): string[] {\n    const normalizedName = normalizeString(toSplit);\n    const normalizedSplitTerm = normalizeString(splitWith);\n    const normalizedPieces = normalizedName.split(new RegExp(`(${normalizedSplitTerm})`, \"i\"));\n\n    let charactersUsed = 0;\n    return normalizedPieces.map((piece) => {\n        const start = charactersUsed;\n        charactersUsed += piece.length;\n        return toSplit.substring(start, charactersUsed);\n    });\n}\n\ninterface IMentionMatch {\n    match: string;\n    rawMatch: string;\n}\n\n/**\n * Custom matching to allow quotation marks in the matching string as well as spaces.\n * Spaces make things more complicated.\n *\n * @param subtext - The string to be tested.\n * @param shouldStartWithSpace - Should the pattern include a test for a whitespace prefix?\n * @returns Matching string if successful.  Null on failure to match.\n */\nexport function matchAtMention(\n    subtext: string,\n    shouldStartWithSpace: boolean = false,\n    requireQuotesForWhitespace: boolean = true,\n): IMentionMatch | null {\n    // Split the string at the lines to allow for a simpler regex.\n    const lines = subtext.split(\"\\n\");\n    const lastLine = lines[lines.length - 1];\n\n    // If you change this you MUST change the regex in src/scripts/__tests__/legacy.test.js !!!\n    /**\n     * Put together the non-excluded characters.\n     *\n     * @param {boolean} excludeWhiteSpace - Whether or not to exclude whitespace characters.\n     *\n     * @returns {string} A Regex string.\n     */\n    function nonExcludedCharacters(excludeWhiteSpace) {\n        let excluded =\n            \"[^\" +\n            '\"' + // Quote character\n            \"\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\" + // Control characters\n            \"\\\\u2028\"; // Line terminator\n\n        if (excludeWhiteSpace) {\n            excluded += \"\\\\s\";\n        }\n\n        excluded += \"]\";\n        return excluded;\n    }\n\n    let regexStr =\n        \"@\" + // @ Symbol triggers the match\n        \"(\" +\n        // One or more non-greedy characters that aren't excluded. Whitespace is allowed, but a starting quote is required.\n        '\"(' +\n        nonExcludedCharacters(false) +\n        '+?)\"?' +\n        \"|\" + // Or\n        // One or more non-greedy characters that aren't exluded. Whitespace may be excluded.\n        \"(\" +\n        nonExcludedCharacters(requireQuotesForWhitespace) +\n        '+?)\"?' +\n        \")\" +\n        \"(?:\\\\n|$)\"; // Newline terminates.\n\n    // Determined by at.who library\n    if (shouldStartWithSpace) {\n        regexStr = \"(?:^|\\\\s)\" + regexStr;\n    }\n    const regex = new RegExp(regexStr, \"gi\");\n    const match = regex.exec(lastLine);\n    if (match) {\n        return {\n            rawMatch: match[0],\n            match: match[2] || match[1], // Return either of the matching groups (quoted or unquoted).\n        };\n    }\n\n    // No match\n    return null;\n}\n\nconst SAFE_PROTOCOL_REGEX = /^(http:\\/\\/|https:\\/\\/|tel:|mailto:\\/\\/|\\/|#)/;\n\n/**\n * Sanitize a URL to ensure that it matches a whitelist of approved url schemes. If the url does not match one of these schemes, prepend `unsafe:` before it.\n *\n * Allowed protocols\n * - \"http://\",\n * - \"https://\",\n * - \"tel:\",\n * - \"mailto://\",\n * - \"#\"\n *\n * @param url The url to sanitize.\n */\nexport function sanitizeUrl(url: string) {\n    if (url.match(SAFE_PROTOCOL_REGEX)) {\n        return url;\n    } else {\n        return \"unsafe:\" + url;\n    }\n}\n\n/**\n * Capitalize the first character of a string.\n *\n * @param str The string to modify.\n */\nexport function capitalizeFirstLetter(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Simple utility function for waiting some duration in promise.\n *\n * @param duration The amount of time to wait.\n */\nexport function promiseTimeout(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction mergeCustomizer(into: any, source: any) {\n    if (Array.isArray(into) || Array.isArray(source)) {\n        return source;\n    }\n}\n\n/**\n * Merge 2 objects, but replace arrays instead of merging them.\n */\nexport function mergeAndReplaceArrays(item1: Record<any, any>, item2: Record<any, any>) {\n    return mergeWith({}, item1, item2, mergeCustomizer);\n}\n","/**\n * Utilities related to the user's system.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nexport enum OS {\n    IOS = \"ios\",\n    ANDROID = \"android\",\n    UNKNOWN = \"unkwown\",\n}\n\n/**\n * Provide relatively rough detection of mobile OS.\n *\n * This is not even close to perfect but can be used to try and offer,\n * OS specific input elements for things like datetimes.\n */\nexport function guessOperatingSystem(): OS {\n    const userAgent = navigator.userAgent || navigator.vendor || (window as any).opera;\n\n    if (/android/i.test(userAgent)) {\n        return OS.ANDROID;\n    }\n\n    // iOS detection from: http://stackoverflow.com/a/9039885/177710\n    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n        return OS.IOS;\n    }\n\n    return OS.UNKNOWN;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\ninterface IClass {\n    new (): any;\n}\n\n/**\n * Determine if an instance is an instance of any of the listed classes.\n *\n * @param needle The instance.\n * @param haystack The classes to check.\n */\nexport function isInstanceOfOneOf(needle: any, haystack: IClass[]) {\n    for (const classItem of haystack) {\n        if (needle instanceof classItem) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Transform an array of objects and an map of objets with a given key.\n *\n * Objects that do not contain the given key are dropped.\n *\n * @param array The array to go through.\n * @param key The key to lookup.\n */\nexport function indexArrayByKey<T extends object>(\n    array: T[],\n    key: string,\n): {\n    [key: string]: T;\n} {\n    const object = {};\n    for (const item of array) {\n        if (key in item) {\n            if (!(item[key] in object)) {\n                object[item[key]] = [];\n            }\n            object[item[key]].push(item);\n        }\n    }\n    return object;\n}\n\nexport function notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n    return value !== null && value !== undefined;\n}\n\nexport function ensureString(maybeString: any) {\n    if (typeof maybeString !== \"string\") throw new TypeError(\"Expected maybeString to have type string\");\n    return maybeString;\n}\n\nexport function forceInt(value: string | null, fallback: number): number {\n    let result = Number.parseInt(value ?? \"\", 10);\n    return Number.isNaN(result) ? fallback : result;\n}\n\nexport type RecordID = string | number;\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React, { useMemo } from \"react\";\nimport { useUniqueID } from \"@library/utility/idUtils\";\nimport { DashboardFormLabel, DashboardLabelType } from \"@dashboard/forms/DashboardFormLabel\";\nimport classNames from \"classnames\";\nimport { IFieldError } from \"@library/@types/api/core\";\nimport ErrorMessages from \"@library/forms/ErrorMessages\";\nimport { FormGroupContext } from \"./DashboardFormGroupContext\";\n\ninterface IProps {\n    label: string;\n    description?: React.ReactNode;\n    afterDescription?: React.ReactNode;\n    labelType?: DashboardLabelType;\n    tag?: keyof JSX.IntrinsicElements;\n    children: React.ReactNode;\n    isIndependant?: boolean; // Setting this resets the side margins.\n}\n\nexport function DashboardFormGroup(props: IProps) {\n    const Tag = (props.tag || \"li\") as \"li\";\n    const inputID = useUniqueID(\"formGroup-\");\n    const labelID = inputID + \"-label\";\n\n    return (\n        <Tag className={classNames(\"form-group\", props.isIndependant && \"row\")}>\n            <FormGroupContext.Provider\n                value={{ inputID, labelID, labelType: props.labelType || DashboardLabelType.STANDARD }}\n            >\n                <DashboardFormLabel {...props} />\n                {props.children}\n            </FormGroupContext.Provider>\n        </Tag>\n    );\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport ReduxActions, { bindThunkAction, useReduxActions } from \"@vanilla/library/src/scripts/redux/ReduxActions\";\nimport actionCreatorFactory from \"typescript-fsa\";\nimport { IApiError } from \"@vanilla/library/src/scripts/@types/api/core\";\nimport { IRole } from \"@dashboard/roles/roleTypes\";\n\nconst createAction = actionCreatorFactory(\"@@roles\");\n\nexport class RoleActions extends ReduxActions {\n    public static getAllACs = createAction.async<{}, IRole[], IApiError>(\"GET_ALL\");\n\n    public getAllRoles = () => {\n        const thunk = bindThunkAction(RoleActions.getAllACs, async () => {\n            const response = await this.api.get(`/roles`, { params: { limit: 500 } });\n            return response.data;\n        })({});\n\n        return this.dispatch(thunk);\n    };\n}\n\nexport function useRoleActions() {\n    return useReduxActions(RoleActions);\n}\n","var map = {\n\t\"./en-SG\": 83,\n\t\"./en-SG.js\": 83,\n\t\"./en-au\": 84,\n\t\"./en-au.js\": 84,\n\t\"./en-ca\": 85,\n\t\"./en-ca.js\": 85,\n\t\"./en-gb\": 86,\n\t\"./en-gb.js\": 86,\n\t\"./en-ie\": 87,\n\t\"./en-ie.js\": 87,\n\t\"./en-il\": 88,\n\t\"./en-il.js\": 88,\n\t\"./en-nz\": 89,\n\t\"./en-nz.js\": 89\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 147;","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport ReduxActions, { bindThunkAction } from \"@library/redux/ReduxActions\";\nimport actionCreatorFactory from \"typescript-fsa\";\nimport { IApiError } from \"@library/@types/api/core\";\nimport debounce from \"lodash/debounce\";\nimport { ICategory } from \"@vanilla/addon-vanilla/@types/api/categories\";\n\nconst createAction = actionCreatorFactory(\"@@categorySuggestions\");\n\nexport default class CategorySuggestionActions extends ReduxActions {\n    public static loadCategories = createAction.async<{ query: string }, ICategory[], IApiError>(\"GET\");\n\n    private internalLoadCategories = (query: string) => {\n        const apiThunk = bindThunkAction(CategorySuggestionActions.loadCategories, async () => {\n            const params = { query, expand: [\"breadcrumbs\"] };\n            const response = await this.api.get(\"/categories/search\", { params });\n            return response.data;\n        })({ query });\n        return this.dispatch(apiThunk);\n    };\n\n    public loadCategories = debounce(this.internalLoadCategories, 100);\n}\n","/**\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2020 Vanilla Forums Inc.\n * @license gpl-2.0-only\n */\n\nimport { useFormGroup } from \"@dashboard/forms/DashboardFormGroupContext\";\nimport TextEditor from \"@vanilla/library/src/scripts/textEditor/TextEditor\";\nimport { mountReact } from \"@vanilla/react-utils\";\nimport { logWarning } from \"@vanilla/utils\";\nimport React, { useState } from \"react\";\n\ninterface IProps {\n    initialValue: string;\n    inputName: string;\n    inputID?: string;\n    language?: string;\n}\n\nexport function DashboardCodeEditor(props: IProps) {\n    const [value, setValue] = useState(props.initialValue);\n    const formGroup = useFormGroup();\n    const inputID = props.inputID ?? formGroup.inputID;\n\n    return (\n        <div className=\"input-wrap\">\n            <input id={inputID} name={props.inputName} type=\"hidden\" value={value} aria-hidden={true} />\n            <TextEditor\n                minimal\n                language={props.language ?? \"text/html\"}\n                value={props.initialValue}\n                onChange={(e, value) => setValue(value ?? \"\")}\n            />\n        </div>\n    );\n}\n\nexport function mountDashboardCodeEditors() {\n    const mounts = document.querySelectorAll(\".js-code-editor\");\n    mounts.forEach((mount) => {\n        if (!(mount instanceof HTMLTextAreaElement)) {\n            logWarning(\"Cannot mount a js-code-editor if it's not a <textarea />\");\n            return;\n        }\n\n        mount.classList.remove(\"js-code-editor\");\n        const initialContent = mount.value;\n\n        mountReact(\n            <DashboardCodeEditor initialValue={initialContent} inputName={mount.name} inputID={mount.id} />,\n            mount,\n            undefined,\n            { overwrite: true },\n        );\n    });\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nexport interface ILocale {\n    localeID: string;\n    localeKey: string;\n    regionalKey: string;\n    displayNames: {\n        [localeKey: string]: string;\n    };\n}\n\nlet currentLocale = \"en\";\nlet localeStore: ILocale[] = [];\nlet callbacks: Array<() => void> = [];\n\n/**\n * Get the available locales.\n */\nexport function getLocales(): ILocale[] {\n    return localeStore;\n}\n\n/**\n * Register a handler for if the locales change.\n * @param callback\n */\nexport function onLocaleChange(callback: () => void) {\n    callbacks.push(callback);\n}\n\n/**\n * Set the current locale.\n */\nexport function setCurrentLocale(localeKey: string) {\n    currentLocale = localeKey;\n    callbacks.forEach(callback => callback());\n}\n\n/**\n * Get the current locale.\n */\nexport function getCurrentLocale() {\n    return currentLocale;\n}\n\n/**\n * Get the current locale in format accepted by Javascript localization functions.\n *\n * PHP canonicalized locales use `_` for the regional separator.\n * Javascript uses `-`.\n */\nexport function getJSLocaleKey() {\n    return currentLocale.replace(\"_\", \"-\");\n}\n\n/**\n * Load a group of locales.\n */\nexport function loadLocales(locales: ILocale[]) {\n    localeStore = [...localeStore, ...locales];\n    callbacks.forEach(callback => callback());\n}\n\n/**\n * Clear the loaded locales.\n */\nexport function clearLocales() {\n    localeStore = [];\n    callbacks.forEach(callback => callback());\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { ILocale, getLocales, onLocaleChange, getCurrentLocale } from \"./localeStore\";\nimport { logWarning } from \"@vanilla/utils\";\n\nconst LocaleContext = React.createContext<{\n    locales: ILocale[];\n    currentLocale: string | null;\n}>({\n    locales: [],\n    currentLocale: null,\n});\n\nexport function LocaleProvider(props: { children?: React.ReactNode }) {\n    const [locales, setLocales] = useState(getLocales());\n    const [currentLocale, setCurrentLocale] = useState(getCurrentLocale());\n\n    if (!currentLocale) {\n        logWarning(\"No locale loaded for <LocaleProvider />\");\n    }\n\n    useEffect(() => {\n        setLocales(getLocales());\n        setCurrentLocale(getCurrentLocale());\n\n        onLocaleChange(() => {\n            setLocales(getLocales());\n            setCurrentLocale(getCurrentLocale());\n        });\n    }, [setLocales, setCurrentLocale]);\n\n    return (\n        <LocaleContext.Provider\n            value={{\n                locales,\n                currentLocale,\n            }}\n        >\n            {props.children}\n        </LocaleContext.Provider>\n    );\n}\n\nexport function useLocaleInfo() {\n    return useContext(LocaleContext);\n}\n","import { logError, logWarning } from \"@vanilla/utils\";\n\n/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\ninterface ITranslations {\n    [key: string]: string;\n}\n\nlet translationStore: ITranslations | null = null;\n\nlet internalTranslationDebugValue = false;\n\n/**\n * Get or set the debug flag.\n *\n * @param newValue - The new value of debug.\n * @returns the current debug setting.\n */\nexport function translationDebug(newValue?: boolean): boolean {\n    if (newValue !== undefined) {\n        internalTranslationDebugValue = newValue;\n    }\n\n    return internalTranslationDebugValue;\n}\n\n/**\n * Load a set of key value pairs as translation resources.\n */\nexport function loadTranslations(translations: ITranslations) {\n    translationStore = { ...translations };\n}\n\n/**\n * Clear all translation resources.\n */\nexport function clearTranslations() {\n    translationStore = null;\n}\n\n/**\n * Translate a string into the current locale.\n *\n * @param str - The string to translate.\n * @param defaultTranslation - The default translation to use.\n *\n * @returns Returns the translation or the default.\n */\nexport function translate(str: string, defaultTranslation?: string): string {\n    // Codes that begin with @ are considered literals.\n    if (str.substr(0, 1) === \"@\") {\n        return str.substr(1);\n    }\n\n    const fallback = defaultTranslation !== undefined ? defaultTranslation : str;\n\n    if (!translationStore) {\n        // Test environment allows top level static initialization.\n        const message = `Attempted to translate a value '${str}' before the translation store was initialized.`;\n        switch (process.env.NODE_ENV) {\n            case \"production\":\n                logWarning(message);\n                break;\n            case \"development\":\n                throw new Error(message + \" Don't use t() in the top level of a file or a static property.\");\n            case \"test\":\n                // Tests (like storybook and unit testing) don't need to actually bootstrap a full translation store all the time.\n                break;\n        }\n        return fallback;\n    }\n\n    if (translationStore[str] !== undefined) {\n        return translationStore[str];\n    }\n\n    if (translationDebug()) {\n        return \"☢️☢️☢️\" + fallback + \"☢️☢️☢️\";\n    } else {\n        return fallback;\n    }\n}\n\n/**\n * The t function is an alias for translate.\n */\nexport const t = translate;\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport { logError, RecordID } from \"@vanilla/utils\";\n\nexport interface IContentTranslatorProps {\n    isLoading?: boolean;\n    isFullScreen?: boolean;\n    properties: ITranslationProperty[];\n    resource: string;\n    title: string;\n    sourceLocale?: string | null;\n    activeLocale?: string | null; // for organizecategories\n    afterSave?: () => void;\n}\n\n// Subtypes\nexport enum TranslationPropertyType {\n    TEXT = \"text\",\n    TEXT_MULTILINE = \"\",\n}\n\nexport interface ITranslationProperty {\n    recordType: string; // Ex. knowledgeCategory\n    recordID?: RecordID; // Ex. 425\n    recordKey?: string; // Ex. Garden.Description\n    sourceText: string; // Ex. \"Howdy Stranger\"\n    propertyName: string; // Ex. name\n    propertyValidation: ITranslationPropertyValidation;\n    propertyType: TranslationPropertyType;\n}\n\nexport interface ITranslationPropertyValidation {\n    minLength?: number;\n    maxLength?: number;\n}\n\nexport const NullContentTranslator: React.FC<IContentTranslatorProps> = (props) => {\n    logError(\"Rendering a Null Content translator. Be sure to check `shouldDisplay` before rendering.\");\n    return null;\n};\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React, { useContext } from \"react\";\nimport { IContentTranslatorProps, NullContentTranslator } from \"./ContentTranslator\";\nimport { useLocaleInfo } from \"./LocaleProvider\";\n\ninterface IContentTranslator {\n    shouldDisplay: boolean;\n    Translator: React.ComponentType<IContentTranslatorProps>;\n}\n\nconst context = React.createContext<IContentTranslator>({\n    shouldDisplay: false,\n    Translator: NullContentTranslator,\n});\n\nlet _TranslationComponent: React.ComponentType<IContentTranslatorProps> | null = null;\n\n/**\n * Provider of the translation component.\n */\nexport const ContentTranslationProvider = (props: { children: React.ReactNode }) => {\n    const { locales } = useLocaleInfo();\n\n    return (\n        <context.Provider\n            value={{\n                shouldDisplay: _TranslationComponent !== null && locales.length > 1,\n                Translator: _TranslationComponent !== null ? _TranslationComponent : NullContentTranslator,\n            }}\n        >\n            {props.children}\n        </context.Provider>\n    );\n};\n\nContentTranslationProvider.setTranslator = (Translator: React.ComponentType<IContentTranslatorProps>) => {\n    _TranslationComponent = Translator;\n};\n\nexport function useContentTranslator(): IContentTranslator {\n    return useContext(context);\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\n/**\n * Get the form data out of a form element.\n *\n * @param formElement - The element to get the data out of.\n *\n * @returns {Object}\n */\nexport function getFormData(formElement: Node | null) {\n    if (!(formElement instanceof HTMLFormElement)) {\n        return {};\n    }\n\n    const data = new FormData(formElement) as any;\n    const result = {};\n\n    data.forEach((key, value) => {\n        result[key] = value;\n    });\n\n    return result;\n}\n\n/**\n * Toggle any attribute on an element.\n *\n * @param element - The element to toggle on.\n * @param attribute - The attribute to toggle.\n */\nexport function toggleAttribute(element: Element, attribute: string) {\n    const newValue = element.getAttribute(attribute) === \"false\";\n    element.setAttribute(attribute, newValue ? \"true\" : \"false\");\n}\n\nconst dataMap = new WeakMap();\n\n/**\n * Set a piece of data specific to a DOM Element. Similar to `$.data`.\n *\n * @param element - The DOM Element to assosciate the data with.\n * @param key - The key to assosciate the data with.\n * @param value - The value to store.\n */\nexport function setData(element: Element, key: string, value: any) {\n    const initialValue = dataMap.has(element) ? dataMap.get(element) : {};\n    initialValue[key] = value;\n\n    dataMap.set(element, initialValue);\n}\n\n/**\n * Get a piece of data specific to a DOM Element. Similar to `$.data`.\n *\n * @param element - The DOM Element to lookup.\n * @param key - The key to lookup.\n * @param defaultValue - A value to use if the element or key aren't found.\n */\nexport function getData(element: Element, key: string, defaultValue?: any) {\n    if (dataMap.has(element) && dataMap.get(element)[key]) {\n        return dataMap.get(element)[key];\n    }\n\n    const attributeString = `data-${key}`;\n\n    if (element.hasAttribute(attributeString)) {\n        return element.getAttribute(attributeString);\n    }\n\n    return defaultValue;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport twemoji from \"twemoji\";\n\nlet emojiSupportedCache: boolean | null = null;\n\n/**\n * Determine if the browser/OS combo has support for real unicode emojis.\n */\nexport function isEmojiSupported() {\n    if (emojiSupportedCache !== null) {\n        return emojiSupportedCache;\n    }\n\n    if (process.env.NODE_ENV !== \"test\") {\n        // Test environment\n        const canvas = document.createElement(\"canvas\");\n        if (canvas.getContext && canvas.getContext(\"2d\")) {\n            const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n            if (ctx) {\n                ctx.fillText(\"😗\", -2, 4);\n                emojiSupportedCache = ctx.getImageData(0, 0, 1, 1).data[3] > 0;\n            } else {\n                emojiSupportedCache = false;\n            }\n        } else {\n            emojiSupportedCache = false;\n        }\n    } else {\n        emojiSupportedCache = true;\n    }\n\n    return emojiSupportedCache;\n}\n\nconst emojiOptions = {\n    className: \"fallBackEmoji\",\n    size: \"72x72\",\n};\n\n/**\n * Returns either native emoji or fallback image\n *\n * @param stringOrNode - A DOM Node or string to convert.\n */\nexport function convertToSafeEmojiCharacters(stringOrNode: string | Node) {\n    if (isEmojiSupported()) {\n        return stringOrNode;\n    }\n    return twemoji.parse(stringOrNode, emojiOptions);\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\n/**\n * Register an keyboard listener for the escape key.\n */\nexport class EscapeListener {\n    /**\n     * @param root - The element to watch for the escape listener in.\n     * @param returnElement - The element to return to when escape is pressed.\n     * @param callback\n     */\n    public constructor(\n        private root: HTMLElement,\n        private returnElement?: HTMLElement,\n        private callback?: (event: KeyboardEvent) => void,\n    ) {}\n\n    /**\n     * Start the listeners.\n     */\n    public start = () => {\n        this.root.addEventListener(\"keydown\", this.keydownListener);\n    };\n\n    /**\n     * Stop the listeners.\n     */\n    public stop = () => {\n        this.root.removeEventListener(\"keydown\", this.keydownListener);\n    };\n\n    /**\n     * Handler that checks for the key of an keyboard event and:\n     *\n     * - Returns focous to the element from the constructor.\n     * - Calls the optional callback.\n     */\n    private keydownListener = (event: KeyboardEvent) => {\n        if (event.key === \"Escape\") {\n            if (this.root.contains(document.activeElement)) {\n                event.preventDefault();\n                this.returnElement && this.returnElement.focus();\n                this.callback && this.callback(event);\n            }\n        }\n    };\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { hashString } from \"@vanilla/utils\";\n\nconst delegatedEventListeners = {};\n\n/**\n * Create an event listener using event delegation.\n *\n * @param eventName - The Event to listen for.\n * @param filterSelector - A CSS selector to match against.\n * @param callback - The callback function. This gets passed the fired event.\n * @param scopeSelector - And element to scope the event listener to.\n *\n * @returns The hash of the event. Save this to use removeDelegatedEvent().\n */\nexport function delegateEvent(\n    eventName: string,\n    filterSelector: string,\n    callback: (event: Event, triggeringElement: HTMLElement) => boolean | void,\n    scopeSelector?: string | HTMLElement,\n): string {\n    let functionKey = eventName + filterSelector + callback.toString();\n\n    let scope;\n\n    if (typeof scopeSelector === \"string\") {\n        scope = document.querySelector(scopeSelector);\n\n        if (!scope) {\n            throw new Error(`Unable to find element in the document for scopeSelector: ${scopeSelector}`);\n        } else {\n            functionKey += scopeSelector;\n        }\n    } else if (scopeSelector instanceof HTMLElement) {\n        scope = scopeSelector;\n    } else {\n        scope = document;\n    }\n\n    const eventHash = hashString(functionKey).toString();\n\n    if (!Object.keys(delegatedEventListeners).includes(eventHash)) {\n        const wrappedCallback = event => {\n            // Get the nearest DOMNode that matches the given selector.\n            const match = filterSelector ? event.target.closest(filterSelector) : event.target;\n\n            if (match) {\n                // Call the callback with the matching element as the context.\n                return callback.call(match, event, match);\n            }\n        };\n\n        scope.addEventListener(eventName, wrappedCallback);\n        delegatedEventListeners[eventHash] = {\n            scope,\n            eventName,\n            wrappedCallback,\n        };\n    }\n\n    return eventHash;\n}\n\n/**\n * Remove a delegated event listener.\n *\n * @param eventHash - The event hash passed from delegateEvent().\n */\nexport function removeDelegatedEvent(eventHash: string) {\n    if (delegatedEventListeners[eventHash]) {\n        const { scope, eventName, wrappedCallback } = delegatedEventListeners[eventHash];\n        scope.removeEventListener(eventName, wrappedCallback);\n        delete delegatedEventListeners[eventHash];\n    }\n}\n\n/**\n * Remove all delegated event listeners that have been registered.\n */\nexport function removeAllDelegatedEvents() {\n    Object.keys(delegatedEventListeners).forEach(key => {\n        removeDelegatedEvent(key);\n    });\n}\n\n/**\n * Handler for files being dragged and dropped.\n *\n * @param event - https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\n */\nexport function getDraggedFile(event: DragEvent): FileList | undefined {\n    if (event.dataTransfer && event.dataTransfer.files && event.dataTransfer.files.length) {\n        event.preventDefault();\n\n        return event.dataTransfer.files;\n    }\n}\n\n/**\n * Handler for files being pasted.\n *\n * @param event - https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\n */\nexport function getPastedFile(event: ClipboardEvent): File | undefined | null {\n    if (event.clipboardData && event.clipboardData.items && event.clipboardData.items.length) {\n        const files = Array.from(event.clipboardData.items)\n            .map((item: any) => (item.getAsFile ? item.getAsFile() : null))\n            .filter(Boolean);\n\n        if (files.length > 0) {\n            event.preventDefault();\n            // Currently only 1 file is supported.\n            const mainFile = files[0];\n            return mainFile;\n        }\n    }\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\n/**\n * Register a callback for focusin and focusin out events. The main improvement here over registering\n * the listeners yourself is that the events fire for the whole tree as 1 item instead of as\n * individual notes.\n *\n * This is particularly useful when you want to track focus leaving or enterring a component\n * without caring about the individual contents inside.\n */\nexport class FocusWatcher {\n    /**\n     * @param watchedNode - The watched dom node.\n     * @param callback - A callback for when the tree focuses and blurs.\n     */\n    public constructor(private watchedNode: Element, private changeHandler: (hasFocus: boolean) => void) {}\n\n    /**\n     * Register the event listeners from this class.\n     */\n    public start = () => {\n        this.watchedNode.addEventListener(\"focusout\", this.handleFocusOut, true);\n        this.watchedNode.addEventListener(\"focusin\", this.handleFocusIn, true);\n        document.addEventListener(\"click\", this.handleClick);\n    };\n\n    /**\n     * Remove the event listeners from this class.\n     */\n    public stop = () => {\n        this.watchedNode.removeEventListener(\"focusout\", this.handleFocusOut, true);\n        this.watchedNode.removeEventListener(\"focusin\", this.handleFocusIn, true);\n        document.removeEventListener(\"click\", this.handleClick);\n    };\n\n    /**\n     * Handle when an element loses focus.\n     */\n    private handleFocusOut = (event: FocusEvent) => {\n        this.checkDomTreeHasFocus(event, this.changeHandler);\n    };\n\n    /**\n     * Handle an element gaining focus.\n     */\n    private handleFocusIn = (event: FocusEvent) => {\n        this.checkDomTreeHasFocus(event, this.changeHandler);\n    };\n\n    /**\n     * Handle an element being clicked.\n     */\n    private handleClick = (event: MouseEvent) => {\n        const triggeringElement = event.target as Element;\n        const wasClicked = this.checkDomTreeWasClicked(triggeringElement);\n        if (!wasClicked) {\n            this.changeHandler(false);\n        }\n    };\n\n    /**\n     * Determine whether or not our DOM tree was clicked.\n     */\n    private checkDomTreeWasClicked(clickedElement: Element) {\n        return (\n            this.watchedNode &&\n            clickedElement &&\n            (this.watchedNode.contains(clickedElement as Element) || this.watchedNode === clickedElement)\n        );\n    }\n\n    /**\n     * Determine if the currently focused element is somewhere inside of (or the same as)\n     * a given Element.\n     *\n     * @param watchedNode - The watched node to look in.\n     */\n    private checkDomTreeHasFocus(event: FocusEvent, callback: (hasFocus: boolean) => void) {\n        setTimeout(() => {\n            const possibleTargets = [\n                // NEEDS TO COME FIRST, because safari will populate relatedTarget on focusin, and its not what we're looking for.\n                document.activeElement, // IE11, Safari.\n                event.relatedTarget as Element, // Chrome (The actual standard)\n                (event as any).explicitOriginalTarget, // Firefox\n            ];\n\n            let activeElement = null;\n            for (const target of possibleTargets) {\n                if (target && target !== document.body) {\n                    activeElement = target;\n                    break;\n                }\n            }\n\n            if (activeElement !== null) {\n                const isWatchedInBody = document.body.contains(this.watchedNode);\n                const isFocusedInBody = document.body.contains(activeElement);\n                const isModal = Boolean(document.getElementById(\"modals\")?.contains(activeElement));\n                const hasFocus = Boolean(\n                    this.watchedNode &&\n                        activeElement &&\n                        (activeElement === this.watchedNode || this.watchedNode.contains(activeElement)),\n                );\n\n                // We will only invalidate based on something actually getting focus.\n                // Make sure we are still mounted before calling this.\n                // It could happen that our flyout is unmounted in between the setTimeout call.\n                // We might have focused on a modal which can't be in the watched tree.\n                if (isWatchedInBody && isFocusedInBody) {\n                    callback(hasFocus || isModal);\n                }\n            }\n        }, 0);\n    }\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\n/**\n * Use the browser's built-in functionality to quickly and safely escape a string.\n *\n * @param str - The string to escape.\n *\n * @returns Escaped HTML.\n */\nexport function escapeHTML(str: string): string {\n    const div = document.createElement(\"div\");\n    div.appendChild(document.createTextNode(str));\n    return div.innerHTML;\n}\n\n/**\n * Use the browser's built-in functionality to quickly unescape a string.\n * UNSAFE with unsafe strings; only use on previously-escaped ones!\n *\n * @param escapedString - A previously escaped string.\n *\n * @returns The unescaped string.\n */\nexport function unescapeHTML(escapedString: string): string {\n    const div = document.createElement(\"div\");\n    div.innerHTML = escapedString;\n    const child = div.childNodes[0];\n    return child && child.nodeValue ? child.nodeValue : \"\";\n}\n\n/**\n * Determine if the browser is escaping the inner contents of our <noscript /> browser.\n */\nexport function browserEscapesNoScript(): boolean {\n    const ns = document.createElement(\"noscript\");\n    ns.innerHTML = \"<test></test>\";\n    document.body.append(ns);\n    const result = ns.innerHTML.startsWith(\"&lt;\");\n    ns.remove();\n    return result;\n}\n\n/**\n * Get an HTML element from a CSS selector or DOM Node.\n *\n * @param selectorOrElement - A CSS selector or an HTML element.\n *\n * @throws If no element was found.\n * @returns An HTMLElement no matter what.\n */\nexport function ensureHtmlElement(selectorOrElement: string | Node | null): HTMLElement {\n    if (typeof selectorOrElement === \"string\") {\n        selectorOrElement = document.querySelector(selectorOrElement);\n    }\n\n    if (!(selectorOrElement instanceof HTMLElement)) {\n        throw new Error(`HTMLElement could not be found for ${selectorOrElement}.`);\n    }\n\n    return selectorOrElement;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\n// A weakmap so we can store multiple load callbacks per script.\nconst loadEventCallbacks: WeakMap<Node, Array<(event) => void>> = new WeakMap();\nconst rejectionCache: Map<string, Error> = new Map();\n\n/**\n * Dynamically load a javascript file.\n */\nexport function ensureScript(scriptUrl: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n        const existingScript: HTMLScriptElement | null = document.querySelector(`script[src='${scriptUrl}']`);\n        if (rejectionCache.has(scriptUrl)) {\n            reject(rejectionCache.get(scriptUrl));\n        }\n        if (existingScript && loadEventCallbacks.has(existingScript)) {\n            // Add another resolveCallback into the weakmap.\n            const callbacks = loadEventCallbacks.get(existingScript);\n            callbacks && callbacks.push(resolve);\n        } else {\n            // The script doesn't exist. Lets create it.\n            const head = document.getElementsByTagName(\"head\")[0];\n            const script = document.createElement(\"script\");\n            script.type = \"text/javascript\";\n            script.src = scriptUrl;\n            script.onerror = (event: ErrorEvent) => {\n                const error = new Error(\"Failed to load a required embed script\");\n                rejectionCache.set(scriptUrl, error);\n                reject(error);\n            };\n\n            const timeout = setTimeout(() => {\n                const error = new Error(`Loading of the script ${scriptUrl} has timed out.`);\n                rejectionCache.set(scriptUrl, error);\n                reject(error);\n            }, 10000);\n\n            loadEventCallbacks.set(script, [resolve]);\n\n            script.onload = event => {\n                clearTimeout(timeout);\n                const callbacks = loadEventCallbacks.get(script);\n                callbacks && callbacks.forEach(callback => callback(event));\n                loadEventCallbacks.delete(script);\n            };\n\n            head.appendChild(script);\n        }\n    });\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { browserEscapesNoScript, unescapeHTML } from \"./sanitization\";\n\n/**\n * Prepare an element and it's contents for use in a shadow root.\n *\n * @param element\n * @param cloneElement - If true, clone the element into a `newElementTag`. Preserves CSS classes and IDs.\n *      Particularly useful for when the initial content is inside of a <noscript /> tag.\n * @param newElementTag\n */\nexport function prepareShadowRoot(\n    element: HTMLElement,\n    cloneElement: boolean = false,\n    newElementTag = \"div\",\n): HTMLElement {\n    let html = element.innerHTML;\n    // This is likely a noscript tag.\n    if (browserEscapesNoScript() || html.trim().startsWith(\"&lt;\")) {\n        html = unescapeHTML(html);\n    }\n    // Safari escapes the contents of the noscript.\n    if (cloneElement) {\n        const newElement = document.createElement(newElementTag);\n\n        // Clone various attributes.\n        newElement.classList.value = element.classList.value;\n        newElement.id = element.id;\n\n        // Insert the element & remove the old old.\n        element.parentNode!.insertBefore(newElement, element);\n        element.remove();\n        element = newElement;\n    } else {\n        // If we aren't making a new real root, we need to empty it out.\n        // Otherwise we'll have duplicate contents.\n        element.innerHTML = \"\";\n    }\n\n    const shadowHeader = element.attachShadow({ mode: \"open\" });\n    shadowHeader.innerHTML = html;\n    return element;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport tabbable from \"tabbable\";\nimport { logError } from \"@vanilla/utils\";\n\n/**\n * A class for handling tabbing inside of a container with various exclusions.\n *\n * The goal is here is to be able to programatically implement various tabbing behaviours\n * required for accessibility.\n */\nexport class TabHandler {\n    private tabbableElements: HTMLElement[];\n\n    /**\n     * Determine if an element is tabbable.\n     */\n    public static isTabbable(element: Node) {\n        const children = tabbable(element.parentNode);\n        return children.includes(element);\n    }\n\n    /**\n     * Construct the handler. Don't be afraid to construct multiple of these.\n     *\n     * The elements in a particular TabHandler are very moment specific.\n     * If the DOM changes underneath it it will likely no longer be valid.\n     *\n     * @param root - The root element to look in.\n     * @param excludedElements - Elements to ignore.\n     * @param excludedRoots - These element's children will be ignored.\n     */\n    public constructor(\n        root: Element = document.documentElement!,\n        private excludedElements: Element[] = [],\n        private excludedRoots: Element[] = [],\n    ) {\n        this.tabbableElements = tabbable(root);\n    }\n\n    /**\n     * Get the next tabbable item within a given tabindex.\n     *\n     * WARNING: Performance can be poor if you pass many excluded roots and do not\n     * sufficiently narrow the tree your are looking in.\n     *\n     * @param from - The currently focused element.\n     * @param reverse - True to get the previous element instead.\n     * @param allowLooping - Whether or not the focus should loop around from beginning <-> end.\n     */\n    public getNext(\n        from: Element | null = document.activeElement,\n        reverse: boolean = false,\n        allowLooping: boolean = true,\n    ): HTMLElement | null {\n        if (!(from instanceof HTMLElement)) {\n            logError(\"Unable to tab to next element, `fromElement` given is not valid: \", from);\n            return null;\n        }\n        const tabbables = this.tabbableElements.filter(this.createExcludeFilterWithExemption(from));\n        const currentTabIndex = tabbables.indexOf(from);\n\n        if (currentTabIndex < 0) {\n            return null;\n        }\n\n        let targetIndex = reverse ? currentTabIndex - 1 : currentTabIndex + 1;\n\n        if (allowLooping) {\n            // Loop over the beginning and ends\n            if (targetIndex < 0) {\n                targetIndex = tabbables.length - 1;\n            } else if (targetIndex >= tabbables.length) {\n                targetIndex = 0;\n            }\n        }\n\n        return tabbables[targetIndex] || null;\n    }\n\n    /**\n     * Get all.\n     */\n    public getAll(from: Element | null = document.activeElement) {\n        if (!(from instanceof HTMLElement)) {\n            logError(\"Unable to tab to next element, `fromElement` given is not valid: \", from);\n            return null;\n        }\n        return this.tabbableElements.filter(this.createExcludeFilterWithExemption(from));\n    }\n\n    /**\n     * Get the first focusable element.\n     */\n    public getInitial(): HTMLElement | null {\n        const tabbables = this.tabbableElements.filter(this.filterAllExcluded);\n        if (tabbables.length > 0) {\n            return tabbables[0];\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Get the last focusable element.\n     */\n    public getLast(): HTMLElement | null {\n        const tabbables = this.tabbableElements.filter(this.filterAllExcluded);\n        if (tabbables.length > 0) {\n            return tabbables[tabbables.length - 1];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Filter out all excluded elements. Allows 1 element and its parents to be exempted.\n     *\n     * The exemption is necessary so we can find our place\n     * if the focus is already in an item that we are trying to exclude.\n     *\n     * @returns A filter for use with [].filter()\n     */\n    private createExcludeFilterWithExemption = (exemption: Element) => {\n        return (elementToFilter: Element): boolean => {\n            const elementIsActiveOrChildOfActive = exemption === elementToFilter || elementToFilter.contains(exemption);\n\n            if (!elementIsActiveOrChildOfActive) {\n                if (this.excludedElements.includes(elementToFilter)) {\n                    return false;\n                }\n                for (const excludedRoot of this.excludedRoots) {\n                    if (excludedRoot !== elementToFilter && excludedRoot.contains(elementToFilter)) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        };\n    };\n\n    /**\n     * A filter for use with [].filter().\n     *\n     * Filters out all excluded elements and roots.\n     */\n    private filterAllExcluded = (elementToFilter: Element): boolean => {\n        if (this.excludedElements.includes(elementToFilter)) {\n            return false;\n        }\n        for (const excludedRoot of this.excludedRoots) {\n            if (excludedRoot !== elementToFilter && excludedRoot.contains(elementToFilter)) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\n// Some polyfills\nimport \"focus-visible\";\nimport smoothscroll from \"smoothscroll-polyfill\";\n\nsmoothscroll.polyfill();\n\nexport * from \"./domData\";\nexport * from \"./emoji\";\nexport * from \"./EscapeListener\";\nexport * from \"./events\";\nexport * from \"./FocusWatcher\";\nexport * from \"./sanitization\";\nexport * from \"./scripts\";\nexport * from \"./shadowDom\";\nexport * from \"./TabHandler\";\nexport * from \"./visibility\";\n","/**\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\n\ninterface IProps {\n    duration: number;\n    onHover: React.MouseEventHandler | undefined;\n    once?: boolean;\n    children: (providedProps: IProvidedProps) => React.ReactNode;\n}\n\ninterface IProvidedProps {\n    onMouseEnter: React.MouseEventHandler;\n    onMouseLeave: React.MouseEventHandler;\n}\n\n/**\n * Component with render props for handling a hover after a certain duration.\n *\n * Simply spread the provided props over the element you want to track the hover of.\n *\n * @example\n * <Hoverable duration={250} onHover={myCallback}>\n *     {providedProps => {\n *          <div {...providedProps} className=\"someClass\">\n *              // Some deeply neested child.\n *          </div>\n *     }}\n * </Hoverable>\n */\nexport class Hoverable extends React.Component<IProps> {\n    public static defaultProps = {\n        once: true,\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public render(): React.ReactNode {\n        return this.props.children({\n            onMouseEnter: this.mouseEnterHandler,\n            onMouseLeave: this.mouseLeaveHandler,\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public componentWillUnmount() {\n        this.dismissTimeout();\n    }\n\n    private hoverTimeout: NodeJS.Timeout;\n    private hasExecuted = false;\n\n    /**\n     * Handle the hover event by checking if we've already called ourselves then calling the passed callback.\n     */\n    private handleHover = (event: React.MouseEvent) => {\n        if (this.hasExecuted && this.props.once) {\n            return;\n        }\n\n        this.hasExecuted = true;\n        if (this.props.onHover) {\n            this.props.onHover(event);\n        }\n    };\n\n    /**\n     * Set a timeout when the mouse enters. If the timeout is not removed we have a hover.\n     */\n    private mouseEnterHandler = (event: React.MouseEvent) => {\n        this.hoverTimeout = setTimeout(() => {\n            this.handleHover(event);\n        }, this.props.duration);\n    };\n\n    /**\n     * Remove the timeout for the hover so it doesn't execute again (or at all).\n     */\n    private mouseLeaveHandler = (event: React.MouseEvent) => {\n        this.dismissTimeout();\n    };\n\n    /**\n     * Cleanup timeouts and properties to reset.\n     */\n    private dismissTimeout() {\n        this.hasExecuted = false;\n        if (this.hoverTimeout) {\n            clearTimeout(this.hoverTimeout);\n        }\n    }\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { RefObject, useState, useLayoutEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport debounce from \"lodash/debounce\";\nimport { stableObjectHash } from \"@vanilla/utils\";\n\n// DOMRectReadOnly.fromRect()\nconst EMPTY_RECT: DOMRect = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    toJSON: () => \"\",\n};\n\n/**\n * Utility hook for measuring a dom element.\n * Will return back measurements as a bounding rectangle for the element contained in a ref.\n *\n * @param ref The ref to measure.\n * @param adjustForScrollOffset If set, y values will be adjusted for the current scroll offset.\n * @param watchRef Used to trigger a remeasure if the ref changes.\n */\nexport function useMeasure(\n    ref: RefObject<HTMLElement | null>,\n    adjustForScrollOffset: boolean = false,\n    watchRef: boolean = false,\n) {\n    const [bounds, setContentRect] = useState<DOMRect>(EMPTY_RECT);\n    const refWatch = watchRef ? ref.current : ref;\n    useLayoutEffect(() => {\n        let animationFrameId: number | null = null;\n\n        const measure = () => {\n            animationFrameId = window.requestAnimationFrame(() => {\n                if (!ref.current) {\n                    setContentRect(EMPTY_RECT);\n                    return;\n                }\n                let rect = ref.current.getBoundingClientRect();\n\n                if (adjustForScrollOffset) {\n                    rect = {\n                        ...rect,\n                        y: rect.y + window.scrollY,\n                        top: rect.top + window.scrollY,\n                        bottom: rect.bottom + window.scrollY,\n                        width: rect.width,\n                        height: rect.height,\n                        right: rect.right,\n                        left: rect.left,\n                    };\n                }\n\n                rect.toJSON = () => {\n                    return JSON.stringify({\n                        y: rect.y,\n                        top: rect.top,\n                        bottom: rect.bottom,\n                        width: rect.width,\n                        height: rect.height,\n                        right: rect.right,\n                        left: rect.left,\n                    });\n                };\n\n                setContentRect(rect);\n            });\n        };\n\n        const resizeListener = debounce(() => {\n            measure();\n        }, 100);\n        window.addEventListener(\"resize\", resizeListener);\n\n        const ro = new ResizeObserver(measure);\n        if (ref.current) {\n            ro.observe(ref.current);\n        } else {\n            setContentRect(EMPTY_RECT);\n        }\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId!);\n            ro.disconnect();\n            resizeListener.cancel();\n            window.removeEventListener(\"resize\", resizeListener);\n            setContentRect(EMPTY_RECT);\n        };\n    }, [adjustForScrollOffset, refWatch, ref]);\n\n    return bounds;\n}\n","/**\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2020 Vanilla Forums Inc.\n * @license gpl-2.0-only\n */\n\nimport React, { useLayoutEffect, useRef } from \"react\";\n\nexport function useDomNodeAttachment(domNodes?: Node[]): React.RefObject<any> {\n    const ref = useRef<HTMLElement | null>();\n\n    useLayoutEffect(() => {\n        if (domNodes && ref.current) {\n            domNodes.forEach((node) => {\n                ref.current?.appendChild(node);\n            });\n        }\n    }, [domNodes]);\n\n    return ref;\n}\n\ninterface IProps extends React.HTMLAttributes<HTMLDivElement> {\n    nodes: Node[];\n}\n\nexport function DomNodeAttacher(_props: IProps) {\n    const { nodes, ...props } = _props;\n    const ref = useDomNodeAttachment(nodes);\n    return <div {...props} ref={ref} />;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { useEffect } from \"react\";\n\nimport { EscapeListener } from \"@vanilla/dom-utils\";\n\n/**\n * React hook for listening for an escape press on the keyboard inside root element.\n *\n * When escape is pressed, the return element will be focused if provided or the callback will will be called.\n */\nexport function useEscapeListener({\n    root,\n    returnElement,\n    callback,\n}: {\n    root?: HTMLElement | null;\n    returnElement?: HTMLElement | null;\n    callback?: (event: KeyboardEvent) => void;\n}) {\n    useEffect(() => {\n        if (root === null || returnElement === null) {\n            // Bail out if these are null. That means we have unfilled refs. Undefined means they were not passed and we should use the defaults.\n            return;\n        }\n        const actualRoot = root || document.documentElement;\n        const escapeListener = new EscapeListener(actualRoot, returnElement, callback);\n        escapeListener.start();\n        return escapeListener.stop;\n    }, [root, returnElement, callback]);\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { useEffect, useLayoutEffect } from \"react\";\nimport { FocusWatcher } from \"@vanilla/dom-utils\";\n\n/**\n * React hook for creating and destroying a FocusWatcher. See FocusWatcher documentation.\n */\nexport function useFocusWatcher(\n    ref: React.RefObject<Element | null>,\n    changeHandler: (hasFocus: boolean) => void,\n    bypass?: boolean,\n) {\n    useLayoutEffect(() => {\n        if (bypass) {\n            return;\n        }\n        if (ref.current !== null) {\n            const focusWatcher = new FocusWatcher(ref.current, changeHandler);\n            focusWatcher.start();\n            return focusWatcher.stop;\n        }\n    }, [ref, changeHandler, bypass]);\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\nimport { useRef, useEffect } from \"react\";\n\n/**\n * Keep a reference to the previous value of something. (during the previous render).\n *\n * @param value\n */\nexport function useLastValue<T>(value: T): T | undefined {\n    const ref = useRef<T>();\n    useEffect(() => void (ref.current = value), [value]);\n    return ref.current;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { useState } from \"react\";\n\n/**\n * Return a throw function for use inside of custom hooks & useEffect.\n *\n * This needed because throwing inside of `useEffect` does not propagate up to error boundaries.\n * @see https://github.com/facebook/react/issues/11334\n */\nexport function useThrowError(): (err: Error) => void {\n    const [error, setError] = useState<Error | null>(null);\n    if (error) {\n        throw error;\n    }\n\n    return setError;\n}\n","/**\n * Utility function related to logging/debugging.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nlet internalDebugValue = false;\n\n/**\n * Get or set the debug flag.\n *\n * @param newValue - The new value of debug.\n * @returns the current debug setting.\n */\nexport function debug(newValue?: boolean): boolean {\n    if (newValue !== undefined) {\n        internalDebugValue = newValue;\n    }\n\n    return internalDebugValue;\n}\n\n/**\n * Log something to console.\n * This only prints in debug mode.\n *\n * @param value - The value to log.\n */\nexport function logDebug(...value: any[]) {\n    if (internalDebugValue) {\n        // eslint-disable-next-line no-console\n        console.log(...value);\n    }\n}\n\n/**\n * Log something to console.\n * This only prints in debug mode, and if outputLog is true.\n *\n * @param outputLog - Condition to render log\n * @param value - The value to log.\n */\nexport function logDebugConditionnal(outputLog = false, ...value: any[]) {\n    if (internalDebugValue && outputLog) {\n        // eslint-disable-next-line no-console\n        console.log(...value);\n    }\n}\n\n/**\n * Log an error to console.\n * This will not run in test mode _unless_ debug is set to true.\n *\n * @param value - The value to log.\n */\nexport function logError(...value: any[]) {\n    if (!internalDebugValue && process.env.NODE_ENV === \"test\") {\n        return;\n    }\n    // eslint-disable-next-line no-console\n    console.error(...value);\n}\n\n/**\n * Log a warning to console.\n * This will not run in test mode _unless_ debug is set to true.\n *\n * @param value - The value to log.\n */\nexport function logWarning(...value: any[]) {\n    if (!internalDebugValue || process.env.NODE_ENV === \"test\") {\n        return;\n    }\n    // eslint-disable-next-line no-console\n    console.warn(...value);\n}\n","import React, { useContext } from \"react\";\nimport { DashboardLabelType } from \"@dashboard/forms/DashboardFormLabel\";\nimport { useThrowError } from \"@vanilla/react-utils\";\n\ninterface IGroupContext {\n    inputID: string;\n    labelID: string;\n    labelType: DashboardLabelType;\n}\nexport const FormGroupContext = React.createContext<IGroupContext | null>(null);\n\nexport function useFormGroup(): IGroupContext {\n    const context = useContext(FormGroupContext);\n\n    const throwError = useThrowError();\n    if (context === null) {\n        throwError(\n            new Error(\n                \"Attempting to create a dashboard from component without a form group. Be sure to place it in a <DashboardFormGroup />\",\n            ),\n        );\n    }\n    return context!;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ReactElement } from \"react\";\n\nexport interface IComponentMountOptions {\n    overwrite?: boolean;\n    clearContents?: boolean;\n    widgetResolver?: IWidgetResolver;\n    bypassPortalManager?: boolean;\n    unmountBeforeRender?: boolean;\n}\n\nexport interface IWidgetOptions {\n    $type?: string; // the component to get, optional because coming from API\n    children?: IWidgetOptions[]; // widgets to mount as children\n    [x: string]: any; // can take additional properties\n}\n\n/**\n * Defines an interface for a function that will turn widget options into props that can be used to render a component.\n */\nexport interface IWidgetResolver {\n    (options: IWidgetOptions): {\n        [key: string]: any;\n    };\n}\n\ninterface IPortal {\n    target: HTMLElement;\n    component: React.ReactElement;\n}\n\nlet hasRendered = false;\nconst portals: IPortal[] = [];\n\nconst PORTAL_MANAGER_ID = \"vanillaPortalManager\";\ntype PortalContextType = React.FC<{ children?: React.ReactNode }>;\nlet PortalContext: PortalContextType = (props) => {\n    return <React.Fragment>{props.children}</React.Fragment>;\n};\n\nexport function applySharedPortalContext(context: PortalContextType) {\n    PortalContext = context;\n    if (hasRendered) {\n        // Re-render the portals. We never want to be the first to initialize rendering though.\n        renderPortals();\n    }\n}\n\n/**\n * Component for managing all mounted components from a single wrapped context.\n *\n * This allows a shared context provider to be applied to parts of the site.\n */\nfunction PortalManager() {\n    return (\n        <div>\n            <PortalContext>\n                {portals.map((portal, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            {ReactDOM.createPortal(portal.component, portal.target)}\n                        </React.Fragment>\n                    );\n                })}\n            </PortalContext>\n        </div>\n    );\n}\n\nfunction renderPortals(callback?: () => void) {\n    hasRendered = true;\n    // Ensure we have our modal container.\n    let container = document.getElementById(PORTAL_MANAGER_ID);\n    if (!container) {\n        container = document.createElement(\"div\");\n        container.id = PORTAL_MANAGER_ID;\n        document.body.appendChild(container);\n    }\n\n    ReactDOM.render(<PortalManager />, container, callback);\n}\n\n/**\n * Mount a root component of a React tree.\n *\n * - ReactDOM render.\n * - Typestyle render.\n *\n * If the overwrite option is passed this component will replace the components you passed as target.\n *\n * Default Mode:\n * <div><TARGET /></div> -> <div><TARGET><REACT></TARGET><div>\n *\n * Overwrite Mode:\n * <div><TARGET /></div> -> <div><REACT/></div>\n */\nexport function mountReact(\n    component: React.ReactElement,\n    target: HTMLElement,\n    callback?: () => void,\n    options?: IComponentMountOptions & { bypassPortalManager?: boolean },\n) {\n    if (options?.bypassPortalManager) {\n        const doRender = () => {\n            ReactDOM.render(<PortalContext>{component}</PortalContext>, target, callback);\n        };\n        if (options?.unmountBeforeRender) {\n            ReactDOM.unmountComponentAtNode(target);\n        }\n        setImmediate(doRender);\n        return;\n    }\n\n    let mountPoint = target;\n    let cleanupContainer: HTMLElement | undefined;\n    if (options?.clearContents) {\n        target.innerHTML = \"\";\n    }\n\n    if (options && options.overwrite) {\n        const container = document.createElement(\"span\");\n        cleanupContainer = container;\n        target.parentElement!.insertBefore(container, target);\n        mountPoint = container;\n    }\n    portals.push({ target: mountPoint, component });\n\n    renderPortals(() => {\n        if (cleanupContainer) {\n            target.remove();\n            if (cleanupContainer.firstElementChild) {\n                cleanupContainer.parentElement!.insertBefore(cleanupContainer.firstElementChild, cleanupContainer);\n                cleanupContainer.remove();\n                target.remove();\n            }\n        }\n        callback && callback();\n    });\n}\n\nexport interface IMountable {\n    target: HTMLElement;\n    component: React.ReactElement;\n}\n\nexport function mountReactMultiple(components: IMountable[], callback?: () => void, options?: IComponentMountOptions) {\n    if (!components.length) {\n        return;\n    }\n\n    let toCleanup: Array<{ target: HTMLElement; cleanup: HTMLElement }> = [];\n    components.forEach(({ component, target }) => {\n        let mountPoint = target;\n        if (options?.clearContents) {\n            target.innerHTML = \"\";\n        }\n\n        if (options && options.overwrite) {\n            const container = document.createElement(\"span\");\n            toCleanup.push({\n                target,\n                cleanup: container,\n            });\n            target.parentElement!.insertBefore(container, target);\n            mountPoint = container;\n        }\n        portals.push({ target: mountPoint, component });\n    });\n\n    renderPortals(() => {\n        toCleanup.forEach(({ cleanup, target }) => {\n            if (cleanup.firstElementChild) {\n                cleanup.parentElement!.insertBefore(cleanup.firstElementChild, cleanup);\n                cleanup.remove();\n                target.remove();\n            }\n        });\n        callback && callback();\n    });\n}\n\n/**\n * Mount a modal with ReactDOM. This is only needed at the top level context.\n *\n * If you are already in a react context, just use `<Modal />`.\n * Note: Using this will clear any other modals mounted with this component.\n *\n * @param element The <Modal /> element to render.\n * @param containerID The container to render the modal into. Defaults to modal container.\n * @param asRealPortal Whether or not we should render this as a real portal, or one managed by the portal manager.\n */\nexport function mountPortal(element: ReactElement<any>, containerID: string, asRealPortal: boolean = false) {\n    // Ensure we have our modal container.\n    let container = document.getElementById(containerID);\n    if (!container) {\n        container = document.createElement(\"div\");\n        container.id = containerID;\n        document.body.appendChild(container);\n    }\n\n    if (asRealPortal) {\n        return ReactDOM.createPortal(element, container);\n    } else {\n        return new Promise((resolve) => mountReact(element, container!, () => resolve()));\n    }\n}\n","import { cssRaw, flattenNests } from \"@library/styles/styleShim\";\nimport { CSSObject } from \"@emotion/css\";\n\nexport function cssOut(selector: string, ...objects: CSSObject[]): void {\n    cssRaw({\n        [selector]: objects.map(flattenNests),\n    });\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { useRoleActions } from \"@dashboard/roles/RoleActions\";\nimport { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { IRoleStoreState } from \"@dashboard/roles/roleReducer\";\nimport { LoadStatus, ILoadable } from \"@vanilla/library/src/scripts/@types/api/core\";\nimport { IComboBoxOption } from \"@vanilla/library/src/scripts/features/search/SearchBar\";\n\nexport function useRoles() {\n    const { getAllRoles } = useRoleActions();\n\n    const rolesByID = useSelector((state: IRoleStoreState) => state.roles.rolesByID);\n\n    useEffect(() => {\n        if (rolesByID.status === LoadStatus.PENDING) {\n            void getAllRoles();\n        }\n    }, [getAllRoles, rolesByID]);\n\n    return rolesByID;\n}\n\nexport function useRoleSelectOptions(): ILoadable<IComboBoxOption[]> {\n    const roles = useRoles();\n\n    if (roles.data) {\n        return {\n            ...roles,\n            data: Object.values(roles.data).map((role) => {\n                return {\n                    value: role.roleID,\n                    label: role.name,\n                };\n            }),\n        };\n    } else {\n        return {\n            ...roles,\n            data: undefined,\n        };\n    }\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport Tokens, { ITokenProps } from \"@vanilla/library/src/scripts/forms/select/Tokens\";\nimport { useRoles, useRoleSelectOptions } from \"@dashboard/roles/roleHooks\";\nimport { LoadStatus } from \"@vanilla/library/src/scripts/@types/api/core\";\nimport { notEmpty } from \"@vanilla/utils\";\n\ninterface IProps extends Omit<ITokenProps, \"options\" | \"isLoading\" | \"value\" | \"onChange\"> {\n    value: number[];\n    onChange: (tokens: number[]) => void;\n    menuPlacement?: string;\n}\n\nexport function MultiRoleInput(props: IProps) {\n    const rolesByID = useRoles();\n    const roleOptions = useRoleSelectOptions();\n\n    return (\n        <Tokens\n            {...props}\n            value={props.value\n                .map((roleID) => {\n                    const role = rolesByID.data?.[roleID];\n                    if (!role) {\n                        return null;\n                    } else {\n                        return {\n                            label: role.name,\n                            value: role.roleID,\n                        };\n                    }\n                })\n                .filter(notEmpty)}\n            onChange={(options) => {\n                const result = options?.map((option) => option.value as number);\n                props.onChange(result);\n            }}\n            options={roleOptions.data ?? []}\n            isLoading={[LoadStatus.PENDING, LoadStatus.LOADING].includes(roleOptions.status)}\n        />\n    );\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license Proprietary\n */\n\nimport { styleFactory } from \"@library/styles/styleUtils\";\nimport { useThemeCache } from \"@library/styles/themeCache\";\nimport { globalVariables } from \"@vanilla/library/src/scripts/styles/globalStyleVars\";\n\nexport const dashboardClasses = useThemeCache(() => {\n    const globalVars = globalVariables();\n    const style = styleFactory(\"dashboard\");\n\n    const formList = style({\n        padding: 0,\n    });\n\n    const helpAsset = style(\"helpAsset\", {\n        fontSize: \"inherit !important\",\n        marginBottom: globalVars.gutter.size,\n    });\n\n    const tokenInput = style(\"tokenInput\", {\n        fontSize: \"inherit\",\n    });\n\n    const selectOne = style(\"selectOne\", {\n        ...{\n            [`&.SelectOne__value-container.inputText.inputText`]: {\n                fontSize: \"inherit\",\n            },\n        },\n    });\n\n    return {\n        formList,\n        helpAsset,\n        tokenInput,\n        selectOne,\n    };\n});\n","/*\n * @author Stéphane LaFlèche <stephane.l@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { IFieldError } from \"@library/@types/api/core\";\nimport { IComboBoxOption } from \"@library/features/search/SearchBar\";\nimport ErrorMessages from \"@library/forms/ErrorMessages\";\nimport { inputBlockClasses } from \"@library/forms/InputBlockStyles\";\nimport * as selectOverrides from \"@library/forms/select/overwrites\";\nimport { selectOneClasses } from \"@library/forms/select/selectOneStyles\";\nimport Paragraph from \"@library/layout/Paragraph\";\nimport { IOptionalComponentID, useUniqueID } from \"@library/utility/idUtils\";\nimport classNames from \"classnames\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport Select from \"react-select\";\nimport { OptionProps } from \"react-select/lib/components/Option\";\n\nexport interface ISelectOneProps extends IMenuPlacement {\n    label: string | null;\n    id?: string;\n    inputID?: string;\n    labelID?: string;\n    disabled?: boolean;\n    defaultValue?: IComboBoxOption;\n    className?: string;\n    placeholder?: string;\n    forceOpen?: boolean;\n    options: IComboBoxOption[] | undefined;\n    onChange: (data: IComboBoxOption) => void;\n    onInputChange?: (value: string) => void;\n    onMenuOpen?: () => void;\n    labelNote?: string;\n    noteAfterInput?: string;\n    errors?: IFieldError[];\n    searchable?: boolean;\n    value: IComboBoxOption | undefined;\n    noOptionsMessage?: (props: OptionProps<any>) => JSX.Element | null;\n    isLoading?: boolean;\n    inputClassName?: string;\n    isClearable?: boolean;\n    describedBy?: string;\n    selectRef?: React.RefObject<Select>;\n    onFocus?: () => void;\n}\n\nexport enum MenuPlacement {\n    AUTO = \"auto\",\n    BOTTOM = \"bottom\",\n    TOP = \"top\",\n}\n\nexport interface IMenuPlacement {\n    menuPlacement?: MenuPlacement;\n}\n\n/**\n * Implements the search bar component\n */\nexport default function SelectOne(props: ISelectOneProps) {\n    // Overwrite components in Select component\n    const overrideProps = useOverrideProps(props);\n\n    const prefix = \"SelectOne\";\n    const [isFocused, setIsFocused] = useState(false);\n    const generatedID = useUniqueID(prefix);\n    const id = props.id || generatedID;\n    const inputID = props.inputID || id + \"-input\";\n    const errorID = id + \"-errors\";\n\n    const { className, disabled, options, searchable, forceOpen } = props;\n    let describedBy;\n    const hasErrors = props.errors && props.errors!.length > 0;\n    if (hasErrors) {\n        describedBy = errorID;\n    }\n\n    const classes = selectOneClasses();\n    const classesInputBlock = inputBlockClasses();\n    return (\n        <div\n            className={classNames(classesInputBlock.root, props.className)}\n            onClick={() => {\n                if (!isFocused && props.selectRef?.current) {\n                    props.selectRef?.current.focus();\n                }\n            }}\n        >\n            {props.label !== null && (\n                <label htmlFor={inputID} className={classesInputBlock.labelAndDescription}>\n                    <span className={classNames(classesInputBlock.labelText, props.label)}>{props.label}</span>\n                    <Paragraph className={classesInputBlock.labelNote}>{props.labelNote}</Paragraph>\n                </label>\n            )}\n\n            <div className={classNames(classesInputBlock.inputWrap, classes.inputWrap, { hasFocus: isFocused })}>\n                <Select\n                    {...overrideProps}\n                    id={id}\n                    options={options}\n                    inputId={inputID}\n                    onChange={props.onChange}\n                    defaultValue={props.defaultValue}\n                    onInputChange={props.onInputChange}\n                    isClearable={props.isClearable}\n                    isDisabled={disabled}\n                    classNamePrefix={prefix}\n                    className={classNames(prefix, className)}\n                    aria-label={props.label || undefined}\n                    aria-labelledby={props.labelID || undefined}\n                    aria-invalid={hasErrors}\n                    aria-describedby={describedBy}\n                    isSearchable={searchable}\n                    value={props.value}\n                    menuIsOpen={forceOpen ? true : isFocused === false ? false : undefined}\n                    placeholder={props.placeholder}\n                    isLoading={props.isLoading}\n                    onMenuOpen={props.onMenuOpen}\n                    onFocus={() => {\n                        setIsFocused(true);\n                        props.onFocus?.();\n                    }}\n                    onBlur={() => setIsFocused(false)}\n                    menuPlacement={props.menuPlacement ?? \"auto\"}\n                    ref={props.selectRef}\n                />\n                <Paragraph className={classesInputBlock.labelNote}>{props.noteAfterInput}</Paragraph>\n                <ErrorMessages id={errorID} errors={props.errors} />\n            </div>\n        </div>\n    );\n}\n\nSelectOne.defaultProps = {\n    isClearable: true,\n};\n\n/**\n * Hook to create react-select override props.\n */\nfunction useOverrideProps(props: ISelectOneProps) {\n    const { inputClassName, noOptionsMessage } = props;\n    const componentOverwrites = useMemo(() => {\n        return {\n            Menu: selectOverrides.Menu,\n            MenuList: selectOverrides.MenuList,\n            Option: selectOverrides.SelectOption,\n            ValueContainer: function CustomValueContainer(localProps) {\n                return <selectOverrides.ValueContainer {...localProps} className={inputClassName} />;\n            },\n            DropdownIndicator: function CustomDropdownIndicator(localProps) {\n                return <selectOverrides.DropdownIndicator {...localProps} />;\n            },\n            NoOptionsMessage: noOptionsMessage || selectOverrides.NoOptionsMessage,\n            LoadingMessage: selectOverrides.OptionLoader,\n        };\n    }, [inputClassName, noOptionsMessage]);\n\n    const customStyles = useMemo(() => {\n        return {\n            option: () => ({}),\n            menu: (base) => {\n                return { ...base, backgroundColor: null, boxShadow: null };\n            },\n            control: () => ({\n                borderWidth: 0,\n            }),\n        };\n    }, []);\n\n    // Overwrite theme in Select component\n    const getTheme = useCallback((theme) => {\n        return {\n            ...theme,\n            borderRadius: {},\n            borderWidth: 0,\n            colors: {},\n            spacing: {},\n        };\n    }, []);\n\n    return {\n        components: componentOverwrites,\n        theme: getTheme,\n        styles: customStyles,\n    };\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\nimport apiv2 from \"@library/apiv2\";\nimport { t } from \"@library/utility/appUtils\";\nimport CategorySuggestionActions from \"@vanilla/addon-vanilla/categories/CategorySuggestionActions\";\nimport { IForumStoreState } from \"@vanilla/addon-vanilla/redux/state\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { OptionProps } from \"react-select/lib/components/Option\";\nimport { NoOptionsMessage } from \"@library/forms/select/overwrites\";\nimport { ILoadable, LoadStatus } from \"@library/@types/api/core\";\nimport { IComboBoxOption } from \"@vanilla/library/src/scripts/features/search/SearchBar\";\nimport Tokens, { ITokenProps } from \"@vanilla/library/src/scripts/forms/select/Tokens\";\nimport SelectOne from \"@vanilla/library/src/scripts/forms/select/SelectOne\";\n\ninterface IProps {\n    multiple?: boolean;\n    lookup: (value: string, first?: boolean) => {};\n    suggestions: ILoadable<any>;\n    onChange: (tokens: IComboBoxOption[]) => void;\n    value: IComboBoxOption[];\n    label: string | null;\n    labelNote?: string;\n    disabled?: boolean;\n    className?: string;\n    placeholder?: string;\n    isLoading: boolean;\n    hideTitle?: boolean;\n}\n\n/**\n * Form component for searching/selecting a category.\n */\nexport class CommunityCategoryInput extends React.Component<IProps> {\n    public static defaultProps: Partial<IProps> = {\n        isLoading: false,\n        suggestions: {\n            status: LoadStatus.PENDING,\n        },\n    };\n\n    lookupOnFocus = () => {\n        if (!this.props.suggestions.data || this.props.suggestions.data.length === 0) {\n            this.props.lookup(\"\", true);\n        }\n    };\n\n    public render() {\n        const { suggestions, multiple } = this.props;\n        let options: IComboBoxOption[] | undefined;\n        if (suggestions.status === LoadStatus.SUCCESS && suggestions.data) {\n            options = suggestions.data.map((suggestion) => {\n                let parentLabel;\n                const crumbLength = suggestion.breadcrumbs?.length ?? 0;\n                if (crumbLength > 1) {\n                    parentLabel = suggestion.breadcrumbs[crumbLength - 2].name;\n                }\n\n                return {\n                    value: suggestion.categoryID,\n                    label: suggestion.name,\n                    data: {\n                        parentLabel,\n                    },\n                };\n            });\n        }\n\n        if (multiple) {\n            return (\n                <Tokens\n                    onFocus={this.lookupOnFocus}\n                    placeholder={t(\"Search...\")}\n                    {...this.props}\n                    label={this.props.label ?? t(\"Community Category\")}\n                    showIndicator\n                    options={options}\n                />\n            );\n        }\n        return (\n            <SelectOne\n                onFocus={this.lookupOnFocus}\n                placeholder={t(\"Search...\")}\n                {...this.props}\n                onChange={(option) => {\n                    if (this.props.onChange) this.props.onChange([option]);\n                }}\n                options={options}\n                label={this.props.label ?? t(\"Community Category\")}\n                value={(options || [])[0]}\n            />\n        );\n    }\n\n    private noOptionsMessage(props: OptionProps<any>): JSX.Element | null {\n        let text = \"\";\n        if (props.selectProps.inputValue === \"\") {\n            text = t(\"Search for a category\");\n        } else {\n            text = t(\"No categories found\");\n        }\n        return <NoOptionsMessage {...props}>{text}</NoOptionsMessage>;\n    }\n}\n\nfunction mapStateToProps(state: IForumStoreState, ownProps: IProps) {\n    return {\n        isLoading: state.forum.categories.suggestions.status === LoadStatus.LOADING,\n        suggestions: state.forum.categories.suggestions,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n    const categorySuggestionActions = new CategorySuggestionActions(dispatch, apiv2);\n\n    return {\n        lookup: (query: string, first = false) => {\n            query = query.trim();\n            if (!first && !query) return;\n            categorySuggestionActions.loadCategories(query);\n        },\n    };\n}\n\nconst withRedux = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withRedux(CommunityCategoryInput);\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React, { useContext } from \"react\";\nimport { useFormGroup } from \"@dashboard/forms/DashboardFormGroupContext\";\nimport classNames from \"classnames\";\nimport { useThrowError } from \"@vanilla/react-utils\";\nimport { DashboardLabelType } from \"@dashboard/forms/DashboardFormLabel\";\nimport { IFieldError } from \"@library/@types/api/core\";\n\ninterface IRadioGroupContext {\n    isInline?: boolean;\n    isGrid?: boolean;\n    onChange?: (value: string) => void;\n    value?: string;\n    errors?: IFieldError[];\n}\n\nconst RadioGroupContext = React.createContext<IRadioGroupContext | null>(null);\n\nexport function useDashboardRadioGroup() {\n    const context = useContext(RadioGroupContext);\n\n    const throwError = useThrowError();\n    if (context === null) {\n        throwError(\n            new Error(\n                \"Attempting to use a radio group without specifying a group. Be sure to wrap it in a <DashboardRadioGroup />\",\n            ),\n        );\n    }\n    return context!;\n}\n\ninterface IProps extends IRadioGroupContext {\n    children: React.ReactNode;\n    type?: \"group\" | \"radioogroup\";\n}\n\nexport function DashboardRadioGroup(props: IProps) {\n    const { labelID, labelType } = useFormGroup();\n    const rootClass = labelType === DashboardLabelType.WIDE ? \"input-wrap-right\" : \"input-wrap\";\n    const type = props.type || \"radioogroup\";\n\n    return (\n        <RadioGroupContext.Provider value={props}>\n            <div\n                className={classNames(rootClass, { inline: props.isInline }, { grid: props.isGrid })}\n                role={type}\n                aria-labelledby={labelID}\n            >\n                {props.children}\n            </div>\n        </RadioGroupContext.Provider>\n    );\n}\n\nexport function DashboardCheckGroup(props: IProps) {\n    return <DashboardRadioGroup {...props} type=\"group\" />;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport { useDashboardRadioGroup } from \"@dashboard/forms/DashboardRadioGroups\";\nimport CheckBox from \"@library/forms/Checkbox\";\n\ninterface IProps {\n    disabled?: boolean;\n    className?: string;\n    label: string;\n    checked?: boolean;\n    name?: string;\n    onChange?: (newValue: boolean) => void;\n    excludeFromICheck?: boolean;\n}\n\nexport function DashboardCheckBox(props: IProps) {\n    const { isInline } = useDashboardRadioGroup();\n    const { excludeFromICheck = true } = props;\n\n    return (\n        <CheckBox\n            {...props}\n            excludeFromICheck={excludeFromICheck}\n            onChange={(e) => props.onChange && props.onChange(!!e.target.checked)}\n            isHorizontal={isInline}\n        />\n    );\n}\n","/**\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2020 Vanilla Forums Inc.\n * @license gpl-2.0-only\n */\n\nimport { LoadingRectangle, LoadingSpacer } from \"@library/loaders/LoadingRectangle\";\nimport React from \"react\";\n\ninterface IProps {\n    descriptionLines?: 1 | 2;\n}\n\nexport function DashboardFormGroupPlaceholder(props: IProps) {\n    return (\n        <div className=\"form-group\">\n            <div className=\"label-wrap\">\n                <LoadingRectangle width=\"35%\" height={14} />\n                <LoadingSpacer height={6} />\n                <LoadingRectangle width=\"80%\" height={10} />\n                {props.descriptionLines === 2 && (\n                    <>\n                        <LoadingSpacer height={4} />\n                        <LoadingRectangle width=\"56%\" height={10} />\n                    </>\n                )}\n            </div>\n            <div className=\"input-wrap\">\n                <input className=\"form-control\" disabled aria-hidden tabIndex={-1} style={{ background: \"#fff\" }} />\n            </div>\n        </div>\n    );\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport classNames from \"classnames\";\n\ninterface IProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function DashboardFormSubheading(props: IProps) {\n    return (\n        <li>\n            <h2 {...props} className={classNames(\"subheading\", props.className)}></h2>\n        </li>\n    );\n}\n","/**\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2020 Vanilla Forums Inc.\n * @license gpl-2.0-only\n */\n\nimport { flattenObject } from \"@vanilla/utils\";\nimport React from \"react\";\n\ninterface IProps {\n    formKey: string; // Key of the form in dot notation. Eg. 'Options.MyKey'\n    value: any;\n    flatten?: boolean;\n}\n\nexport function DashboardLegacyFormValue(props: IProps) {\n    const { formKey, value, flatten } = props;\n    const dottedKey = formKey.replace(\".\", \"-dot-\");\n    if (value == null) {\n        return <input type=\"hidden\" value={\"\"} name={dottedKey} style={{ display: \"none\" }} />;\n    } else if (typeof value === \"object\") {\n        if (flatten) {\n            const flattened = flattenObject(value, formKey);\n            return (\n                <>\n                    {Object.entries(flattened).map(([key, value]) => {\n                        return <DashboardLegacyFormValue key={key} formKey={key} value={value} />;\n                    })}\n                </>\n            );\n        } else {\n            const json = JSON.stringify(value);\n            return <input type=\"hidden\" value={json} name={dottedKey} style={{ display: \"none\" }} />;\n        }\n    } else {\n        return <input type=\"hidden\" value={value} name={dottedKey} style={{ display: \"none\" }} />;\n    }\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\nimport apiv2 from \"@library/apiv2\";\nimport { IComboBoxOption } from \"@library/features/search/SearchBar\";\nimport SelectOne, { ISelectOneProps } from \"@library/forms/select/SelectOne\";\nimport { t } from \"@vanilla/i18n\";\nimport { notEmpty } from \"@vanilla/utils\";\nimport debounce from \"lodash/debounce\";\nimport get from \"lodash/get\";\nimport React, { useCallback, useDebugValue, useEffect, useRef, useState } from \"react\";\n\nexport interface ILookupApi {\n    searchUrl: string;\n    singleUrl: string;\n    valueKey: string;\n    labelKey: string;\n    excludeLookups?: string[];\n    processOptions?: (values: IComboBoxOption[]) => IComboBoxOption[];\n}\n\nexport interface ISelectLookupProps extends Omit<ISelectOneProps, \"options\" | \"value\"> {\n    api: ILookupApi;\n    value: any;\n    onInitialValueLoaded?: (option: IComboBoxOption) => void;\n}\n\n/**\n * Form component for searching/selecting a category.\n */\nexport function SelectLookup(props: ISelectLookupProps) {\n    const { value, api } = props;\n    const [ownQuery, setQuery] = useState<string | number>(\"\");\n    const [initialValue] = useState(value);\n    const [options, currentOption] = useApiLookup(api, value, ownQuery, initialValue, props.onInitialValueLoaded);\n    const isLoading = (!!initialValue && !currentOption) || options === null;\n    return (\n        <>\n            <SelectOne\n                isLoading={isLoading}\n                {...props}\n                value={currentOption ?? undefined}\n                options={options ?? []}\n                onInputChange={setQuery}\n            />\n        </>\n    );\n}\n\nconst apiCaches = new Map<string, any>();\n\nfunction useApiLookup(\n    api: ILookupApi,\n    currentValue: string,\n    currentInputValue: string | number,\n    initialValue: any,\n    onInitialValueLoaded?: (option: IComboBoxOption) => void,\n): [IComboBoxOption[] | null, IComboBoxOption | null] {\n    const [options, setOptions] = useState<IComboBoxOption[] | null>(null);\n    const [initialOption, setInitialOption] = useState<IComboBoxOption | null>(null);\n    const { searchUrl, singleUrl, labelKey, valueKey, processOptions, excludeLookups } = api;\n\n    useDebugValue({\n        options,\n        api,\n        apiCaches,\n    });\n\n    const transformApiToOption = useCallback(\n        (result: any): IComboBoxOption => {\n            const label = get(result, labelKey, t(\"(Untitled)\"));\n            const value = get(result, valueKey, \"\");\n            return {\n                label,\n                value,\n                data: result,\n            };\n        },\n        [labelKey, valueKey],\n    );\n\n    // Loading of initial option.\n    useEffect(() => {\n        if (initialValue && !(excludeLookups ?? []).includes(initialValue)) {\n            const actualApiUrl = singleUrl.replace(\"/api/v2\", \"\").replace(\"%s\", initialValue);\n            apiv2.get(actualApiUrl).then((response) => {\n                if (response.data) {\n                    const option = transformApiToOption(response.data);\n                    onInitialValueLoaded?.(option);\n                    setInitialOption(option);\n                }\n            });\n        }\n    }, []);\n\n    const updateOptions = useCallback(\n        debounce((inputValue: string | number) => {\n            const actualSearchUrl = searchUrl.replace(\"/api/v2\", \"\").replace(\"%s\", inputValue.toString());\n\n            const cached = apiCaches.get(actualSearchUrl);\n            if (cached) {\n                setOptions(cached);\n                return;\n            }\n\n            // Fetch from API\n            apiv2.get(actualSearchUrl).then((response) => {\n                const { data } = response;\n                let options: IComboBoxOption[] = data.map(transformApiToOption);\n                if (processOptions) {\n                    options = processOptions(options);\n                }\n                apiCaches.set(actualSearchUrl, options);\n                setOptions(options);\n            });\n        }, 200),\n        [searchUrl, singleUrl, processOptions],\n    );\n\n    useEffect(() => {\n        updateOptions(currentInputValue);\n    }, [updateOptions, currentInputValue]);\n\n    const currentOption =\n        [initialOption, ...(options ? options : [])].filter(notEmpty).find((option) => {\n            return option.value === currentValue;\n        }) ?? null;\n\n    return [options, currentOption];\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { useFormGroup } from \"@dashboard/forms/DashboardFormGroupContext\";\nimport { DashboardLabelType } from \"@dashboard/forms/DashboardFormLabel\";\nimport ErrorMessages from \"@library/forms/ErrorMessages\";\nimport { ISelectLookupProps, SelectLookup } from \"@vanilla/library/src/scripts/forms/select/SelectLookup\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\ninterface IProps extends Omit<ISelectLookupProps, \"label\" | \"labelID\" | \"inputID\"> {}\n\nexport const DashboardSelectLookup: React.FC<IProps> = (props: IProps) => {\n    const { inputID, labelType, labelID } = useFormGroup();\n    const rootClass = labelType === DashboardLabelType.WIDE ? \"input-wrap-right\" : \"input-wrap\";\n    return (\n        <div className={classNames(rootClass)}>\n            <SelectLookup\n                {...props}\n                label={null}\n                labelID={labelID}\n                inputID={inputID}\n                inputClassName={classNames(\"form-control\", props.inputClassName)}\n            />\n            {props.errors && <ErrorMessages errors={props.errors} />}\n        </div>\n    );\n};\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport { useFormGroup } from \"@dashboard/forms/DashboardFormGroupContext\";\nimport classNames from \"classnames\";\nimport { DashboardLabelType } from \"@dashboard/forms/DashboardFormLabel\";\nimport InputTextBlock, { IInputTextProps } from \"@library/forms/InputTextBlock\";\nimport { IFieldError } from \"@library/@types/api/core\";\nimport ErrorMessages from \"@library/forms/ErrorMessages\";\n\ninterface IProps extends IInputTextProps {\n    errors?: IFieldError[];\n    afterInput?: React.ReactNode;\n}\n\nexport const DashboardInput: React.FC<IProps> = (props: IProps) => {\n    const { inputID, labelType } = useFormGroup();\n    const classes = classNames(props.className);\n    const rootClass = labelType === DashboardLabelType.WIDE ? \"input-wrap-right\" : \"input-wrap\";\n\n    return (\n        <div className={rootClass}>\n            <InputTextBlock\n                id={inputID}\n                inputProps={props.inputProps}\n                multiLineProps={props.multiLineProps}\n                className={classNames(props.inputProps ? props.inputProps.className : null, classes)}\n                noMargin={true}\n            />\n            {props.errors && <ErrorMessages errors={props.errors} />}\n            {props.afterInput}\n        </div>\n    );\n};\n","/**\n * @author Stéphane LaFlèche <stephane.l@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport { t } from \"@library/utility/appUtils\";\nimport { IOptionalComponentID, useUniqueID } from \"@library/utility/idUtils\";\nimport { checkRadioClasses } from \"@library/forms/checkRadioStyles\";\nimport classNames from \"classnames\";\n\ninterface IProps extends IOptionalComponentID {\n    id?: string;\n    className?: string;\n    checked?: boolean;\n    disabled?: boolean;\n    onChange?: any;\n    label: string;\n    name?: string;\n    isHorizontal?: boolean;\n    note?: string;\n    defaultChecked?: boolean;\n    fakeFocus?: boolean;\n}\n\ninterface IState {\n    id: string;\n}\n\n/**\n * A styled, accessible checkbox component.\n */\nexport default function RadioButton(props: IProps) {\n    const labelID = useUniqueID(\"radioButton-label\");\n    const classes = checkRadioClasses();\n    const { isHorizontal, note } = props;\n\n    const noteID = useUniqueID(\"radioButtonNote\");\n\n    return (\n        <>\n            <label className={classNames(classes.root, props.className, { isHorizontal })}>\n                <input\n                    className={classNames(classes.input, \"exclude-icheck\", props.fakeFocus && \"focus-visible\")}\n                    onChange={props.onChange}\n                    aria-disabled={props.disabled}\n                    name={props.name}\n                    disabled={props.disabled}\n                    type=\"radio\"\n                    checked={props.checked}\n                    defaultChecked={props.defaultChecked}\n                    tabIndex={0}\n                    aria-describedby={note ? noteID : undefined}\n                />\n                <span aria-hidden={true} className={classNames(classes.iconContainer, classes.disk)}>\n                    <svg className={classes.diskIcon}>\n                        <title>{t(\"Radio Button\")}</title>\n                        <circle fill=\"currentColor\" cx=\"3\" cy=\"3\" r=\"3\" />\n                    </svg>\n                </span>\n                {props.label && (\n                    <span id={labelID} className={classes.label}>\n                        {props.label}\n                    </span>\n                )}\n            </label>\n            {note && (\n                <div id={noteID} className={\"info\"}>\n                    {note}\n                </div>\n            )}\n        </>\n    );\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport { useDashboardRadioGroup } from \"@dashboard/forms/DashboardRadioGroups\";\nimport RadioButton from \"@library/forms/RadioButton\";\nimport { checkRadioClasses } from \"@library/forms/checkRadioStyles\";\nimport classNames from \"classnames\";\n\ninterface IProps {\n    disabled?: boolean;\n    className?: string;\n    label: string;\n    value: string;\n    name?: string;\n    note?: string;\n}\n\nexport function DashboardRadioButton(props: IProps) {\n    const { onChange, value, isInline } = useDashboardRadioGroup();\n\n    const controlledProps =\n        onChange !== undefined\n            ? {\n                  onChange: () => onChange(props.value),\n                  checked: value === props.value,\n              }\n            : {};\n\n    return (\n        <RadioButton\n            {...props}\n            {...controlledProps}\n            isHorizontal={isInline}\n            className={classNames(props.className, checkRadioClasses().isDashboard)}\n        />\n    );\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { useFormGroup } from \"@dashboard/forms/DashboardFormGroupContext\";\nimport { DashboardLabelType } from \"@dashboard/forms/DashboardFormLabel\";\nimport ErrorMessages from \"@library/forms/ErrorMessages\";\nimport SelectOne, { ISelectOneProps } from \"@library/forms/select/SelectOne\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\ninterface IProps extends Omit<ISelectOneProps, \"inputID\" | \"labelID\" | \"label\"> {}\n\nexport const DashboardSelect: React.FC<IProps> = (props: IProps) => {\n    const { inputID, labelType, labelID } = useFormGroup();\n    const rootClass = labelType === DashboardLabelType.WIDE ? \"input-wrap-right\" : \"input-wrap\";\n    return (\n        <div className={classNames(rootClass)}>\n            <SelectOne\n                {...props}\n                label={null}\n                labelID={labelID}\n                inputID={inputID}\n                inputClassName={classNames(\"form-control\", props.inputClassName)}\n            />\n            {props.errors && <ErrorMessages errors={props.errors} />}\n        </div>\n    );\n};\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport { useFormGroup } from \"@dashboard/forms/DashboardFormGroupContext\";\nimport { DashboardLabelType } from \"@dashboard/forms/DashboardFormLabel\";\nimport classNames from \"classnames\";\nimport { visibility } from \"@library/styles/styleHelpers\";\nimport { IFieldError } from \"@library/@types/api/core\";\nimport ErrorMessages from \"@library/forms/ErrorMessages\";\n\ninterface IProps {\n    checked: boolean;\n    onChange: (newValue: boolean) => void;\n    inProgress?: boolean;\n    disabled?: boolean;\n    errors?: IFieldError[];\n}\n\nexport function DashboardToggle(props: IProps) {\n    const { inputID, labelType } = useFormGroup();\n    const rootClass = labelType === DashboardLabelType.WIDE ? \"input-wrap-right\" : \"input-wrap\";\n\n    return (\n        <div className={rootClass}>\n            <label\n                className={classNames(\"toggle-wrap\", {\n                    \"toggle-wrap-on\": props.checked,\n                    \"toggle-wrap-off\": !props.checked,\n                })}\n            >\n                <div\n                    className={classNames({\n                        \"toggle-wrap-active\": props.inProgress,\n                    })}\n                >\n                    <input\n                        disabled={props.disabled || props.inProgress}\n                        id={inputID}\n                        type=\"checkbox\"\n                        className={classNames(visibility().visuallyHidden, \"toggle-input\")}\n                        checked={props.checked}\n                        onChange={(event) => props.onChange(!!event.target.checked)}\n                    />\n                    <div className=\"toggle-well\" />\n                    <div className=\"toggle-slider\" />\n                </div>\n            </label>\n            {props.errors && <ErrorMessages errors={props.errors} />}\n        </div>\n    );\n}\n","/**\n * @author Dominic Lacaille <dominic.lacaille@vanillaforums.com>\n * @copyright 2009-2020 Vanilla Forums Inc.\n * @license gpl-2.0-only\n */\n\nimport { DashboardInput } from \"@dashboard/forms/DashboardInput\";\nimport { DashboardRadioButton } from \"@dashboard/forms/DashboardRadioButton\";\nimport { DashboardRadioGroup } from \"@dashboard/forms/DashboardRadioGroups\";\nimport { DashboardSelect } from \"@dashboard/forms/DashboardSelect\";\nimport { DashboardSelectLookup } from \"@dashboard/forms/DashboardSelectLookup\";\nimport { DashboardToggle } from \"@dashboard/forms/DashboardToggle\";\nimport { IFormControl, IJsonSchema } from \"@dashboard/widgets/JsonSchemaTypes\";\nimport { useUniqueID } from \"@vanilla/library/src/scripts/utility/idUtils\";\nimport React from \"react\";\n\ninterface IProps {\n    formControl: IFormControl;\n    schema: IJsonSchema;\n    value: any;\n    onChange: (value: any) => void;\n    isRequired?: boolean;\n}\n\nexport function WidgetFormControl(props: IProps) {\n    const { formControl, schema, onChange } = props;\n    const value = props.value ?? schema.default;\n    const radioName = useUniqueID(\"radioInput\");\n\n    switch (formControl.inputType) {\n        case \"textBox\":\n            const isMultiline = formControl.type === \"textarea\";\n            const type = formControl.type === \"number\" ? \"number\" : \"text\";\n            return (\n                <DashboardInput\n                    inputProps={{\n                        value: value ?? \"\",\n                        onChange: (event) => onChange(event.target.value),\n                        maxLength: schema.type === \"string\" ? schema.maxLength : undefined,\n                        type: !isMultiline ? type : undefined,\n                        placeholder: formControl.placeholder,\n                        multiline: isMultiline ? true : false,\n                    }}\n                    multiLineProps={\n                        isMultiline\n                            ? {\n                                  rows: 4,\n                              }\n                            : undefined\n                    }\n                />\n            );\n        case \"radio\":\n            return (\n                <DashboardRadioGroup value={value} onChange={onChange}>\n                    {Object.entries(formControl.choices.staticOptions ?? []).map(\n                        ([optionValue, label]: [string, string]) => (\n                            <DashboardRadioButton\n                                name={radioName}\n                                key={optionValue}\n                                label={label}\n                                value={optionValue}\n                            />\n                        ),\n                    )}\n                </DashboardRadioGroup>\n            );\n        case \"dropDown\":\n            const { api, staticOptions } = formControl.choices;\n            if (api) {\n                return (\n                    <DashboardSelectLookup\n                        isClearable={!props.isRequired}\n                        value={value}\n                        onChange={(option) => onChange(option?.value)}\n                        api={api}\n                    />\n                );\n            }\n            const options = staticOptions\n                ? Object.entries(staticOptions).map(([value, label]: [string, string]) => ({\n                      value,\n                      label,\n                  }))\n                : [];\n            return (\n                <DashboardSelect\n                    isClearable={false}\n                    value={options.find((opt) => {\n                        let valueCompare: any = opt.value;\n                        if (valueCompare === \"true\") {\n                            valueCompare = true;\n                        } else if (valueCompare === \"false\") {\n                            valueCompare = false;\n                        }\n                        return valueCompare == value;\n                    })}\n                    onChange={(option) => onChange(option?.value)}\n                    options={options}\n                />\n            );\n        case \"checkBox\":\n        case \"toggle\":\n            return <DashboardToggle checked={value} onChange={onChange} />;\n        default:\n            return <div>{(formControl as any).inputType} is not supported</div>;\n    }\n}\n","/**\n * @author Dominic Lacaille <dominic.lacaille@vanillaforums.com>\n * @copyright 2009-2020 Vanilla Forums Inc.\n * @license gpl-2.0-only\n */\n\nimport React from \"react\";\nimport { DashboardFormGroup } from \"@dashboard/forms/DashboardFormGroup\";\nimport { WidgetFormControl } from \"@dashboard/widgets/WidgetFormControl\";\nimport get from \"lodash/get\";\nimport { IJsonSchema } from \"@dashboard/widgets/JsonSchemaTypes\";\nimport { t } from \"@vanilla/library/src/scripts/utility/appUtils\";\nimport { notEmpty } from \"@vanilla/utils\";\n\ninterface IPartialProps {\n    path: string;\n    schema: IJsonSchema;\n\n    // The value of the subset of the form.\n    instance: any;\n    isRequired?: boolean;\n\n    // The root value of the form.\n    rootInstance: any;\n    onChange(instance: any): void;\n}\n\nfunction WidgetPartialSchemaForm(props: IPartialProps) {\n    const { schema, path, instance, rootInstance, onChange } = props;\n    if (schema.type === \"object\") {\n        const requiredProperties = schema.required ?? [];\n        return (\n            <>\n                {Object.entries(schema.properties).map(([key, value]) => (\n                    <WidgetPartialSchemaForm\n                        key={key}\n                        path={`${path}.${key}`}\n                        schema={value}\n                        instance={instance[key]}\n                        rootInstance={rootInstance}\n                        onChange={(value) => {\n                            onChange({ ...instance, [key]: value });\n                        }}\n                        isRequired={requiredProperties.includes(key)}\n                    />\n                ))}\n            </>\n        );\n    }\n    const control = schema[\"x-control\"];\n    const controls = Array.isArray(control) ? control : [control];\n    return (\n        <>\n            {controls.filter(notEmpty).map((singleControl, index) => {\n                const { label, description, conditions } = singleControl;\n                if (conditions) {\n                    const evaluated: boolean[] = conditions.map(({ fieldName, values }) =>\n                        values.includes(get(rootInstance, fieldName, schema.default)),\n                    );\n                    if (evaluated.some((ev) => !ev)) return null;\n                }\n                return (\n                    <DashboardFormGroup key={index} label={label ?? t(\"(Untitled)\")} description={description}>\n                        <WidgetFormControl\n                            formControl={singleControl}\n                            value={instance}\n                            schema={schema}\n                            onChange={onChange}\n                            isRequired={props.isRequired}\n                        />\n                    </DashboardFormGroup>\n                );\n            })}\n        </>\n    );\n}\n\ninterface IProps {\n    schema: IJsonSchema;\n    // The full value of the form.\n    instance: any;\n    onChange(instance: any): void;\n}\n\nexport function WidgetFormGenerator(props: IProps) {\n    if (Object.entries(props.schema).length === 0) {\n        return <div>{t(\"There are no configuration options for this widget.\")}</div>;\n    }\n\n    return <WidgetPartialSchemaForm path=\"instance\" rootInstance={props.instance} {...props} />;\n}\n","/**\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2020 Vanilla Forums Inc.\n * @license gpl-2.0-only\n */\n\nimport { DashboardCodeEditor } from \"@dashboard/forms/DashboardCodeEditor\";\nimport { DashboardFormGroup } from \"@dashboard/forms/DashboardFormGroup\";\nimport { DashboardFormGroupPlaceholder } from \"@dashboard/forms/DashboardFormGroupPlaceholder\";\nimport { DashboardFormSubheading } from \"@dashboard/forms/DashboardFormSubheading\";\nimport { DashboardLegacyFormValue } from \"@dashboard/forms/DashboardLegacyFormValue\";\nimport { DashboardSelectLookup } from \"@dashboard/forms/DashboardSelectLookup\";\nimport { WidgetFormGenerator } from \"@dashboard/widgets/WidgetFormGenerator\";\nimport { t } from \"@vanilla/i18n\";\nimport { IComboBoxOption } from \"@vanilla/library/src/scripts/features/search/SearchBar\";\nimport { ILookupApi } from \"@vanilla/library/src/scripts/forms/select/SelectLookup\";\nimport { LoadingRectangle } from \"@vanilla/library/src/scripts/loaders/LoadingRectangle\";\nimport React, { useEffect, useState } from \"react\";\n\ninterface IProps {\n    widgetID?: string | null;\n    initialWidgetParameters?: Record<any, any>;\n    format?: string;\n    initialBody?: string;\n    forceLoading?: boolean;\n}\n\nconst widgetsApi: ILookupApi = {\n    searchUrl: \"/widgets\",\n    singleUrl: \"/widgets/%s\",\n    valueKey: \"widgetID\",\n    labelKey: \"name\",\n    excludeLookups: [\"raw\"],\n    processOptions: (options) => {\n        const customOption: IComboBoxOption = {\n            label: t(\"Custom HTML\"),\n            value: \"raw\",\n        };\n        return [customOption, ...options];\n    },\n};\n\nexport function PocketContentForm(props: IProps) {\n    const { initialWidgetParameters, initialBody } = props;\n    const initialValue = props.format === \"widget\" && props.widgetID ? props.widgetID : \"raw\";\n    const [typeOption, setTypeOption] = useState<IComboBoxOption | null>(\n        initialValue === \"raw\"\n            ? {\n                  label: t(\"Custom HTML\"),\n                  value: \"raw\",\n              }\n            : null,\n    );\n    const [mountCounter, setMountCounter] = useState(0);\n    const [values, setValues] = useState(props.initialWidgetParameters ?? {});\n    const [body, setBody] = useState(\"\");\n\n    useEffect(() => {\n        setValues(initialWidgetParameters ?? {});\n        setMountCounter((value) => value + 1);\n    }, [initialWidgetParameters]);\n\n    useEffect(() => {\n        setBody(initialBody ?? \"\");\n        setMountCounter((value) => value + 1);\n    }, [initialBody]);\n\n    return (\n        <>\n            <ul>\n                <DashboardFormGroup\n                    label={t(\"Type\")}\n                    description={t(\"Create your own custom Pocket, or configure one of our existing widgets.\")}\n                >\n                    {typeOption?.value === \"raw\" ? (\n                        <DashboardLegacyFormValue formKey=\"Format\" value={typeOption.value} />\n                    ) : (\n                        <>\n                            <DashboardLegacyFormValue formKey=\"Format\" value={\"widget\"} />\n                            <DashboardLegacyFormValue formKey=\"WidgetID\" value={typeOption?.value} />\n                        </>\n                    )}\n                    <DashboardSelectLookup\n                        onChange={(val) => {\n                            setTypeOption(val);\n                        }}\n                        isClearable={false}\n                        onInitialValueLoaded={setTypeOption}\n                        value={typeOption?.value ?? initialValue}\n                        api={widgetsApi}\n                    />\n                </DashboardFormGroup>\n            </ul>\n            {!typeOption || props.forceLoading ? (\n                <ul>\n                    <DashboardFormSubheading>\n                        <LoadingRectangle height={18} width={\"200px\"} />\n                    </DashboardFormSubheading>\n\n                    <DashboardFormGroupPlaceholder descriptionLines={2} />\n                    <DashboardFormGroupPlaceholder />\n                    <DashboardFormGroupPlaceholder />\n                </ul>\n            ) : (\n                <section>\n                    <DashboardFormSubheading>{typeOption.label}</DashboardFormSubheading>\n                    {typeOption.value === \"raw\" ? (\n                        <DashboardFormGroup\n                            label={t(\"Custom HTML\")}\n                            description={t(\n                                \"Enter the text of the pocket. This will be output exactly as you type it so make sure that you enter valid HTML.\",\n                            )}\n                        >\n                            <DashboardCodeEditor key={mountCounter} inputName={\"Body\"} initialValue={body} />\n                        </DashboardFormGroup>\n                    ) : (\n                        <>\n                            <WidgetFormGenerator\n                                key={mountCounter}\n                                schema={typeOption.data.schema}\n                                onChange={setValues}\n                                instance={values}\n                            />\n                            <DashboardLegacyFormValue formKey=\"WidgetParameters\" value={values} />\n                        </>\n                    )}\n                </section>\n            )}\n        </>\n    );\n}\n","/*\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { addComponent } from \"@library/utility/componentRegistry\";\nimport { PocketMultiRoleInput } from \"../conditions/PocketMultiRoleInput\";\nimport { PocketCategoryInput } from \"../conditions/PocketCategoryInput\";\nimport { PocketContentForm } from \"../conditions/PocketContentForm\";\n\naddComponent(\"pocket-multi-role-input\", PocketMultiRoleInput);\n\n// Do something to prevent crash here.\naddComponent(\"pocket-category-input\", PocketCategoryInput);\naddComponent(\"PocketContentForm\", PocketContentForm, { bypassPortalManager: true, unmountBeforeRender: true });\n","/*\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React, { useState } from \"react\";\nimport { MultiRoleInput } from \"@dashboard/roles/MultiRoleInput\";\nimport { DashboardFormGroup } from \"@dashboard/forms/DashboardFormGroup\";\nimport { t } from \"@vanilla/i18n/src\";\nimport { dashboardClasses } from \"@dashboard/forms/dashboardStyles\";\n\nexport function PocketMultiRoleInput(props) {\n    const [roles, setRoles] = useState(props.initialValue && props.initialValue !== \"\" ? props.initialValue : []);\n    return (\n        <DashboardFormGroup label={t(\"Roles\")} tag={\"div\"}>\n            <div className=\"input-wrap\">\n                <MultiRoleInput\n                    showIndicator={true}\n                    className={dashboardClasses().tokenInput}\n                    label={\"\"}\n                    value={roles ?? []}\n                    onChange={(viewRoleIDs) => {\n                        setRoles(viewRoleIDs ?? []);\n                    }}\n                    menuPlacement={\"auto\"}\n                />\n            </div>\n            {!roles || (roles.length === 0 && <input name={props.fieldName + []} type={\"hidden\"} value={[]} />)}\n            {roles &&\n                roles.map((role, key) => {\n                    return <input key={key} name={props.fieldName + \"[]\"} type={\"hidden\"} value={role} />;\n                })}\n        </DashboardFormGroup>\n    );\n}\n","/*\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React, { useEffect, useState } from \"react\";\nimport { DashboardFormGroup } from \"@dashboard/forms/DashboardFormGroup\";\nimport { t } from \"@vanilla/i18n/src\";\nimport CommunityCategoryInput from \"@vanilla/addon-vanilla/forms/CommunityCategoryInput\";\nimport { IComboBoxOption } from \"@library/features/search/SearchBar\";\nimport { selectOneClasses } from \"@library/forms/select/selectOneStyles\";\nimport { inputClasses } from \"@library/forms/inputStyles\";\nimport classNames from \"classnames\";\nimport { DashboardCheckBox } from \"@dashboard/forms/DashboardCheckBox\";\nimport { DashboardRadioGroup } from \"@dashboard/forms/DashboardRadioGroups\";\nimport { dashboardClasses } from \"@dashboard/forms/dashboardStyles\";\n\nexport function PocketCategoryInput(props) {\n    const [category, setCategory] = useState(\n        props.label && props.initialValue\n            ? {\n                  label: props.label,\n                  value: props.initialValue,\n              }\n            : undefined,\n    );\n\n    const [inheritCategory, setInheritCategory] = useState(props.inheritCategory);\n\n    const classes = selectOneClasses();\n    inputClasses().applyInputCSSRules();\n\n    const hasCategory = category && category.value;\n\n    return (\n        <DashboardFormGroup label={t(\"Category\")} tag={\"div\"}>\n            <div className=\"input-wrap\">\n                <div className={classes.inputWrap}>\n                    <CommunityCategoryInput\n                        placeholder={t(\"Select...\")}\n                        label={null}\n                        className={dashboardClasses().selectOne}\n                        onChange={(option) => {\n                            setCategory(option[0]);\n                        }}\n                        value={category ? [category] : []}\n                    />\n                </div>\n                <input name={props.fieldName} type={\"hidden\"} value={hasCategory ?? \"\"} />\n                <div className={classNames(\"checkbox\", classes.checkBoxAfterInput)}>\n                    <DashboardRadioGroup>\n                        <DashboardCheckBox\n                            checked={hasCategory ? inheritCategory : false}\n                            onChange={() => {\n                                setInheritCategory(!inheritCategory);\n                            }}\n                            label={t(\"Apply to subcategories\")}\n                            disabled={!hasCategory}\n                        />\n                    </DashboardRadioGroup>\n                </div>\n                <input name={\"InheritCategory\"} type={\"hidden\"} value={`${inheritCategory ? 1 : 0}`} />\n            </div>\n        </DashboardFormGroup>\n    );\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React from \"react\";\nimport { useFormGroup } from \"@dashboard/forms/DashboardFormGroupContext\";\nimport { IFieldError } from \"@library/@types/api/core\";\nimport ErrorMessages from \"@library/forms/ErrorMessages\";\n\ninterface IProps {\n    label: string;\n    description?: React.ReactNode;\n    afterDescription?: React.ReactNode;\n    labelType?: DashboardLabelType;\n}\n\nexport enum DashboardLabelType {\n    STANDARD = \"standard\",\n    WIDE = \"wide\",\n}\n\nexport const DashboardFormLabel: React.FC<IProps> = (props: IProps) => {\n    const { inputID, labelID } = useFormGroup();\n\n    const labelType = props.labelType !== undefined ? props.labelType : DashboardLabelType.STANDARD;\n    const rootClass = labelType === DashboardLabelType.WIDE ? \"label-wrap-wide\" : \"label-wrap\";\n\n    return (\n        <div className={rootClass} id={labelID}>\n            {props.label && <label htmlFor={inputID}>{props.label}</label>}\n            {props.description && <div className=\"info\">{props.description}</div>}\n            {props.afterDescription}\n        </div>\n    );\n};\n","/**\n * Set wepback's public path.\n * Otherwise the lookups of dynamically imported webpack files can fail on sites that have a different webroot\n * Eg. installed in a subfolder / using Reverse Proxy.\n *\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2018 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { assetUrl, getMeta } from \"@library/utility/appUtils\";\n\n/**\n * This needs to be a free variable.\n *\n * Webpack does some magic to make this work.\n * It you try and set a local or global version of it, it WILL NOT work.\n *\n * @see https://stackoverflow.com/questions/12934929/what-are-free-variables\n * @see https://webpack.js.org/configuration/output/#output-publicpath\n * @see https://github.com/webpack/webpack/issues/2776#issuecomment-233208623\n */\n// @ts-ignore: Cannot find variable warning. See comment aboe.\n__webpack_public_path__ = assetUrl(\"/dist/\" + __BUILD__SECTION__ + \"/\");\n"],"sourceRoot":""}